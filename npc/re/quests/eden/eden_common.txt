//===== rAthena Script ======================================= 
//= Eden Group Quests - Common NPCs
//===== By: ================================================== 
//= L0ne_W0lf
//===== Current Version: ===================================== 
//= 2.0
//===== Compatible With: ===================================== 
//= rAthena Project
//===== Description: ========================================= 
//= Eden Group Headquarter NPC's.
//===== Additional Comments: ================================= 
//= 1.0 First Version.
//= 1.1 Removed showevent use, and use of duplicates.
//=     Commented out warps that should not be active.
//= 1.2 Reduced 300+ copy-paste lines to 1 duplicated NPC. [Brian]
//= 1.3 Some little optimization here and there. [Masao]
//= 1.4 Updated to match the new Izlude Map. [Masao]
//= 1.5 Added some missing Eden Group Teleport Officers. [Masao]
//= 1.6 Added Izlude RE coordinates. [Euphy]
//= 1.7 Added Malaya teleporter. [Euphy]
//= 1.8 Updated to match the latest official script. [Euphy]
//= 1.9 Added support to Para_Team_Mark_ in Eden Group. [AtlantisRO/Ragno]
//= 2.0 Added use of F_HasEdenGroupMark function. [Ragno]
//============================================================

// Common NPCs :: lv_tre
//============================================================
moc_para01,27,35,5	script	Secretaria Lime Evenor	4_F_EDEN_OFFICER,{
	if (checkweight(1201,1) == 0 || (MaxWeight - Weight) < 2000) {
		mes "- Wait a minute !! -";
		mes "- Currently you're carrying -";
		mes "- too many items with you. -";
		mes "- Please try again -";
		mes "- after you lose some weight. -";
		close;
	}
	if (countitem(6219) > 0) {
		mes "[Lime Evenor]";
		mes "Thanks to many adventurers visiting our Eden Group, we've recently prepared a new version of Eden Group Mark for our visitors.";
		mes "And it is also possible to exchange old version of Eden Group Mark into a new one.";
		next;
		mes "[Lime Evenor]";
		mes "Though it has a slight time delay, this new version of Eden Group Mark will send you back to current saved location.";
		mes "Would you like to exchange yours?";
		next;
		if (select("Sure:I'm good.") == 2){
			mes "[Lime Evenor]";
			mes "What possible reason would you have... to not exchange?";
			close;
		}
		delitem 6219,1;
		getitem 22508,1;
		mes "[Lime Evenor]";
		mes "There you go. Come back again~";
		close;
	}
	mes "[Lime Evenor]";
	mes "Bem-vindo, ..hmmm...acho que sei o seu nome...";
	next;
	mes "[Lime Evenor]";
	mes ".. ah, ^3131FF"+strcharinfo(0)+"^000000, que veio do outro mundo.";
	next;
	mes "[Lime Evenor]";
	mes "Bom, pode me chamar de Lime Evenor, estou aqui para auxiliar suas aventuras em Dasnora. Por favor, me informe sobre os detalhes que precisa saber.";
	next;
	while (1) {
		switch (select("Qual foi dessa turma?:Quero fazer parte disso!:Cancelar.")) {
		case 1:
			mes "[Lime Evenor]";
			mes "Um grupo que ajuda os aventureiros a lidar com os problemas em Dasnora.";
			next;
			mes "[Lime Evenor]";
			mes "Se as pessoas precisarem de ajuda, colocamos o caso no mural e apresentamos aos nossos aventureiros que ficam dispostos para ajudar os necessitados.";
			next;
			mes "[Lime Evenor]";
			mes "Nos revisamos a quest e postamos no mural. Sempre tentamos recompensar o aventureiro como forma de pagamento.";
			next;
			mes "[Lime Evenor]";
			mes "Se quiser se familiarizar no mundo, esta eh uma otima maneira de seguir.";
			next;
			mes "[Lime Evenor]";
			mes "Poder viajar pelo mundo e fazer novos amigos enquanto nos ajuda. Seu nome honroso vai ser espalhado por terras distantes.";
			next;
			break;
		case 2:
			if (!callfunc("F_HasEdenGroupMark")) {
				mes "[Lime Evenor]";
				mes "Que bom! Vamos ao que interessa.";
				mes "Tem certeza que vai nos ajudar?";
				next;
				switch (select("Sim, quero ajudar.:Negativo, tenho mais oque fazer.")) {
				case 1:
					mes "[Lime Evenor]";
					mes "Aright. Excellent! Please write down your name here.";
					input .@input$;
					next;
					mes "[Lime Evenor]";
					mes "Are you done?";
					mes "Let me see.";
					next;
					mes "[Lime Evenor]";
					mes "Your name is ^3131FFBo"+.@input$+"Ba^000000...? Is that right?";
					mes "Huh? Isn't it??";
					next;
					emotion ET_SWEAT;
					mes "[Lime Evenor]";
					mes "Hmm, that isn't what you wrote?";
					mes "Ok, hmm, it seems a bit hard to read.";
					next;
					mes "[Lime Evenor]";
					mes "Would you please write your name again? Please write it ^3131FFClearly^000000.";
					input .@input$;
					next;
					mes "[Lime Evenor]";
					mes "Ah~ ha. You are ^3131FF"+strcharinfo(0)+"^000000.";
					mes "I got it right this time.";
					next;
					emotion ET_BEST;
					mes "[Lime Evenor]";
					mes "We already put your name on the list.";
					mes "Welcome to Eden's group new member!";
					next;
					mes "[Lime Evenor]";
					mes "Hopefully you can do great work as an Eden's member.";
					getitem 22508,1; //Para_Team_Mark_
					next;
					break;
				case 2:
					mes "[Lime Evenor]";
					mes "Do you still have questions about Eden Group?";
					next;
					break;
				}
			} else {
				mes "[Lime Evenor]";
				mes "You are already a member of Eden Group.";
				next;
			}
			break;
		case 3:
			mes "[Lime Evenor]";
			mes "If you have any questions please come back again.";
			close;
		}
	}
}

		// ----------------------- Retirado---------------------------------------
		/*
		case 3:
			mes "[Lime Evenor]";
			mes "Do you want to register some missions that you want us to do?";
			next;
			if(select("Yes, I want to register.:No, I don't.") == 1) {
				mes "[Lime Evenor]";
				mes "Alrigh. Please write down your name on it.";
				input .@input$;
				next;
				mes "[Lime Evenor]";
				mes "^3131FF"+strcharinfo(0)+"^000000.. Is that your name?";
				mes "Hmm, your handwriting is not clear. I can't read. it";
				next;
				mes "[Lime Evenor]";
				mes "^3131FF"+strcharinfo(0)+"^000000, tell me what you want to register for.";
				mes "Which map should we go to?";
				input .@input$;
				next;
				mes "[Lime Evenor]";
				mes "^3131FFMission Map: "+.@inputstr$+"^000000";
				mes "hum, I will note that.";
				next;
				mes "[Lime Evenor]";
				mes "Please let me know what kind of missions your are lookng for.";
				mes "It should be briefly like 'Hunt 10 Porings.'";
				input .@input$;
				next;
				mes "[Lime Evenor]";
				mes "Are you done?";
				mes "Let me check.";
				next;
				mes "[Lime Evenor]";
				mes "Huh...........";
				next;
				mes "[Lime Evenor]";
				mes "Hum.. huh??..................";
				next;
				emotion ET_THINK;
				mes "[Lime Evenor]";
				mes "I think you should complete one of our missions first before you take up a new mission.";
				next;
				emotion ET_HNG;
				mes "[Lime Evenor]";
				mes "^3131FFClient: Lime Evenor^000000";
				mes "^3131FFMission: Practice your handwriting for one month.^000000";
				mes "You've got really bad penmanship!";
				next;
				mes "[Lime Evenor]";
				mes "^3131FFMission:"+.@input$+"^000000";
				mes "Anyway, you are done registering for a new mission.";
				next;
				mes "[Lime Evenor]";
				mes "Missions are fully booked. You have to wait for an spot to clear up.";
				mes "Please kindly wait until your turn.";
				next;
			}
			break;
		case 4:
			if (callfunc("F_HasEdenGroupMark")) {
				mes "[Lime Evenor]";
				mes "Would like to try some missions as an Eden member?";
				next;
				mes "[Lime Evenor]";
				mes "Check the right side of the bulletin board, there are various kinds of missions waiting for you.";
				mes "Please carefully read the mission list and the qualifications and choose one of them.";
				next;
			}
			else {
				mes "[Lime Evenor]";
				mes "You need to join Eden Group first if you want to do some missions.";
				close;
			}
			break;	
		

		*/

-	script	Eden Teleport Officer#0::eto	-1,{
	mes "[Eden Teleport Officer]";
	mes "Those who are wandering around this strange world with aimless eyes listen up and come to me!";
	mes "Eden group is here to help you and will show you the great future.";
	next;
	mes "[Eden Teleport Officer]";
	mes "You have nothing to do but waste your time?";
	mes "You are eager to do something good but no one offers you work?";
	mes "Would you like to be a problem solver?";
	mes "Eden group is here to solve your problem.";
	next;
	switch (select("Move to Eden Group.:Don't want to talk anymore.")) {
	case 1:
		mes "[Eden Teleport Officer]";
		mes "Let's go to our secret base!";
		set nak_warp,strnpcinfo(2);
		close2;
		warp "moc_para01",31,14;
		end;
	case 2:
		mes "[Eden Teleport Officer]";
		mes "If you don't know what to do for your future, don't hesitate to tell me. Just drop by and talk to me! Ok?";
		close;
	}
}
prontera,124,76,3	duplicate(eto)	Eden Teleport Officer#1	729
moc_ruins,68,164,3	duplicate(eto)	Eden Teleport Officer#2	729
geffen,132,66,3	duplicate(eto)	Eden Teleport Officer#3	729
alberta,124,67,3	duplicate(eto)	Eden Teleport Officer#4	729
aldebaran,133,119,5	duplicate(eto)	Eden Teleport Officer#5	729
izlude_in,68,162,1	duplicate(eto)	Eden Teleport Officer#6	729
prt_church,103,78,3	duplicate(eto)	Eden Teleport Officer#7	729
geffen_in,160,104,5	duplicate(eto)	Eden Teleport Officer#8	729
moc_prydb1,53,126,3	duplicate(eto)	Eden Teleport Officer#9	729
alberta_in,75,39,3	duplicate(eto)	Eden Teleport Officer#10	729
payon_in02,58,58,1	duplicate(eto)	Eden Teleport Officer#11	729
payon,177,111,3	duplicate(eto)	Eden Teleport Officer#12	729
que_ng,33,73,3	duplicate(eto)	Eden Teleport Officer#13	729
que_ng,144,161,5	duplicate(eto)	Eden Teleport Officer#14	729
yuno,144,189,5	duplicate(eto)	Eden Teleport Officer#15	729
rachel,125,144,3	duplicate(eto)	Eden Teleport Officer#16	729
comodo,202,151,4	duplicate(eto)	Eden Teleport Officer#17	729
hugel,93,153,4	duplicate(eto)	Eden Teleport Officer#18	729
veins,220,109,4	duplicate(eto)	Eden Teleport Officer#19	729
einbroch,250,211,4	duplicate(eto)	Eden Teleport Officer#20	729
lighthalzen,164,86,4	duplicate(eto)	Eden Teleport Officer#21	729
amatsu,100,145,5	duplicate(eto)	Eden Teleport Officer#22	729
ayothaya,221,191,3	duplicate(eto)	Eden Teleport Officer#23	729
louyang,224,107,3	duplicate(eto)	Eden Teleport Officer#24	729
gonryun,162,122,5	duplicate(eto)	Eden Teleport Officer#25	729
moscovia,209,197,5	duplicate(eto)	Eden Teleport Officer#26	729
brasilis,191,224,3	duplicate(eto)	Eden Teleport Officer#27	729
dewata,192,193,5	duplicate(eto)	Eden Teleport Officer#28	729
morocc,161,97,5	duplicate(eto)	Eden Teleport Officer#29	729
izlude,131,148,4	duplicate(eto)	Eden Teleport Officer#30	729
izlude_a,131,148,4	duplicate(eto)	Eden Teleport Officer#30::eto_iz_a	729
izlude_b,131,148,4	duplicate(eto)	Eden Teleport Officer#30::eto_iz_b	729
izlude_c,131,148,4	duplicate(eto)	Eden Teleport Officer#30::eto_iz_c	729
izlude_d,131,148,4	duplicate(eto)	Eden Teleport Officer#30::eto_iz_d	729
umbala,105,158,3	duplicate(eto)	Eden Teleport Officer#31	729
malaya,225,218,1	duplicate(eto)	Eden Teleport Officer#32	729
verus04,116,243,0	duplicate(eto)	Eden Teleport Officer#33	729

moc_para01,30,10,0	script	#eden_out	45,1,1,{
OnTouch:
	switch (nak_warp) {
		case 1: warp "prontera",116,72; end;
		case 2: warp "moc_ruins",64,161; end;
		case 3: warp "geffen",120,39; end;
		case 4: warp "alberta",117,56; end;
		case 5: warp "aldebaran",168,112; end;
		case 6: warp "izlude_in",73,165; end;
		case 7: warp "prt_church",99,78; end;
		case 8: warp "geffen_in",162,99; end;
		case 9: warp "moc_prydb1",51,118; end;
		case 10: warp "alberta_in",73,43; end;
		case 11: warp "payon_in02",64,60; end;
		case 12: warp "payon",161,58; end;
		case 13: warp "que_ng",33,63; end;
		case 14: warp "que_ng",144,166; end;
		case 15: warp "yuno",158,125; end;
		case 16: warp "rachel",115,125; end;
		case 17: warp "comodo",192,145; end;
		case 18: warp "hugel",88,148; end;
		case 19: warp "veins",216,104; end;
		case 20: warp "einbroch",246,204; end;
		case 21: warp "lighthalzen",159,95; end;
		case 22: warp "amatsu",110,150; end;
		case 23: warp "ayothaya",217,178; end;
		case 24: warp "louyang",217,103; end;
		case 25: warp "gonryun",155,120; end;
		case 26: warp "moscovia",218,198; end;
		case 27: warp "brasilis",190,220; end;
		case 28: warp "dewata",192,182; end;
		case 29: warp "morocc",161,97; end;
		case 30: warp "izlude",134,118; end;	// Old coordinates: (127,142)
		case 31: warp "umbala",94,154; end;
		case 32: warp "malaya",234,199; end;
		case 33: warp "verus04",115,243; end;
		default: warp "prontera",116,72; end;
	}
	end;
}

moc_para01,47,39,3	script	#warp_2_pass	111,{
	if (callfunc("F_HasEdenGroupMark")) {
		mes "[Lime Evenor]";
		mes "Oh, it is an exclusive place only for Eden's members.";
		mes "If you are a member, you can come whenever you want!";
		next;
		switch (select("Enter.:Don't Enter.")) {
		case 1:
			mes "This door is beautifully decorated but seems a little bit too heavy.";
			close2;
			warp "moc_para01",106,14;
			end;
		case 2:
			mes "[Lime Evenor]";
			mes "Well, if you are not interested.";
			close;
		}
	}
	mes "[Lime Evenor]";
	mes "Oh, this is an exclusive place for Eden's members only.";
	mes "If you want to go inside, you have to join the Eden Group.";
	close;
}

moc_para01,16,22,7	script	Old Adventurer#eden	900,{
	mes "[Old Adventurer]";
	mes "Harsh, I am strong enough even if I look old! What is her name? Lime Evenor? She just ignores me like I am a some kind of old senile bastard.";
	next;
	mes "[Old Adventurer]";
	mes "I came here to join the Eden group! I don't deserve this!";
	mes "Do you also think I look like I'm senile?";
	close;
}

moc_para01,182,48,3	script	Eden's Chief#eden	886,{
	set .@eggf,rand(1,118);
	set .@eggf_1,.@eggf + 1;
	set .@eggf_2,.@eggf + 2;
	set .@eggf_6,.@eggf + 6;
	mes "[Eden's Chief]";
	mes ""+.@eggf+".. "+.@eggf_1+"... "+.@eggf_2+".... "+.@eggf_6+"..?";
	next;
	emotion ET_CRY;
	mes "[Eden's Chief]";
	mes "Oh, Shoot! How many eggs have I done?";
	mes "Aww!!! I totally forgot! I have to count again!";
	next;
	emotion ET_CRY;
	mes "[Eden's Chief]";
	mes "Why have you asked me to do this? What kind of mission is that?";
	next;
	emotion ET_CRY;
	mes "[Eden's Chief]";
	mes "What are you going to with all of those fried eggs? I am sure you can't eat all of them. You just want to bother me, right?";
	close;
}

moc_para01,172,28,5	script	Eden's Intern#eden	883,{
	mes "[Eden's Intern]";
	mes "Actually, I realized that.";
	next;
	mes "[Eden's Intern]";
	mes "We have to work really hard unless you want to fail.";
	next;
	mes "[Eden's Intern]";
	mes "But, I have never learned about pharmaceuticals yet.";
	next;
	mes "[Eden's Intern]";
	mes "I'm going to fail. I can't do this.";
	close;
}

moc_para01,20,35,5	script	Office Assistant Neede	814,{
	mes "[Neede]";
	mes "I became a Eden's member several years ago, but it feels like it was yesterday.";
	mes "I have been doing lots of work, so I didn't even notice how many years I spent here.";
	next;
	mes "[Neede]";
	mes "It reminds me that it was like a war everyday.";
	next;
	mes "[Neede]";
	mes "The chief of ^3131FFthe restaurant on the right side^000000";
	mes "uses too much seasoning every time he cooks, the smell is all over the lobby. We have to open the window regularly because we can't stand the smell!";
	next;
	mes "[Neede]";
	mes "And, do you see the ^3131FFgymnasium^000000 on the cross of ^3131FFthe north side of the lobby^000000? They always shout when they exercise, I can even hear them from here!";
	next;
	emotion ET_ANGER;
	mes "[Neede]";
	mes "Besides, the weird girl from ^3131FFthe second floor^000000 is crying all the time. Her cries drive me crazy.";
	next;
	mes "[Neede]";
	mes "Ah, that weird girl is actually our boss...";
	next;
	mes "[Neede]";
	mes "I don't know what she has been up to. But she cries and shouts all the time. Oh, sometimes I hear 'Bang!', loud booming sounds... I don't know where it came from.";
	next;
	emotion ET_HUK;
	mes "[Neede]";
	mes "Wait!";
	mes "Shh! It is a secret, you can't tell anybody!";
	next;
	mes "[Neede]";
	emotion ET_OHNO;
	mes "I don't trust Evenor. She never shows her feelings... she's going to snitch on me to my boss.";
	next;
	emotion ET_HNG, getnpcid(0, "Secretary Lime Evenor");
	mes "[Lime Evenor]";
	mes "I am not that kind of girl.";
	next;
	emotion ET_KEK;
	mes "[Neede]";
	mes "Huh? Did you hear that? Gosh~!";
	close;
}

function	script	F_HasEdenGroupMark	{
	return (countitem(6219) > 0 || countitem(22508) > 0);
}


// =============================================
//					NPC's Custom
// =============================================

-	script	Medica	-1,{

	.@Price = 0;	// Zeny required for heal
	.@Buffs = 0;	// Also buff players? (1: yes / 0: no)
	.@Delay = 0;	// Heal delay, in seconds

	if (@HD > gettimetick(2))
		end;
	if (.@Price) {
		message strcharinfo(0), "Healing costs " + callfunc("F_InsertComma",.@Price) + " Zeny.";
		if (Zeny < .@Price)
			end;
		if (select("^0055FFHeal^000000:^777777Cancel^000000") == 2)
			end;
		Zeny -= .@Price;
	}
	specialeffect2 EF_HEAL2;
	percentheal 100,100;
	if (.@Buffs) {
		specialeffect2 EF_INCAGILITY;
		sc_start SC_INCREASEAGI,240000,10;
		specialeffect2 EF_BLESSING;
		sc_start SC_BLESSING,240000,10;
	}
	if (.@Delay)
		@HD = gettimetick(2) + .@Delay;
	end;
}



//
// NPC para receber as skills Platinum
//


moc_para01,36,185,4	script	Platinum Skill NPC	94,{
	mes "[Platinum Skill NPC]";
	mes "I can give you the special skills available to your job.";
	mes "Would you like these skills now?";
	next;
	if (select("Yes Please:No") == 2) {
		mes "[Platinum Skill NPC]";
		mes "Have a nice day... >.>";
		close;
	}
	callfunc "F_GetPlatinumSkills";
	mes "[Platinum Skill NPC]";
	mes "There you go!";
	close;
}


//
// NPC reset Skill
//

moc_para01,44,21,2	script	Reset Girl	124,{
	//	 		Skills,	Stats,	Both,	Limit
	setarray .@Reset,	100,	100,	100,	0;
	mes "[Reset Girl]";
	if(.@Reset[3] && reset_limit > .@Reset[3]) {
		mes "Sorry you can only reset "+callfunc("F_InsertPlural",.@Reset[3],"time")+" in your life.";
		close;
	}
	mes "I am the Reset Girl.";
	mes "Reset Stats: "+ callfunc("F_InsertComma",.@Reset[1]) +"z";
	mes "Reset Skills: "+ callfunc("F_InsertComma",.@Reset[0]) +"z";
	mes "Reset Both: "+ callfunc("F_InsertComma",.@Reset[2]) +"z";
	if(.@Reset[3]) mes "You may only reset "+callfunc("F_InsertPlural",.@Reset[3],"time")+", so use "+((.@Reset[3]>1)?"them":"it")+" wisely.";
	mes "Please select the service you want:";
	next;
	set .@i,(select("^FF3355Reset Skills:Reset Stats:Reset Both^000000:Cancel"));
	if(.@i > 3) close;
	mes "[Reset Girl]";
	if (Zeny < .@Reset[.@i-1]) {
		mes "Sorry, you don't have enough Zeny.";
		close;
	}
	if(.@Reset[3]){
		mes "You can only reset "+callfunc("F_InsertPlural",.@Reset[3],"time")+" in your life, are you sure?";
		if(select("Let me think:That's fine") == 1) close;
	}
	set Zeny, Zeny-.@Reset[.@i-1];
	if(.@i&1){
		sc_end_class;
		ResetSkill;
	}
	if(.@i&2) ResetStatus;
	mes "There you go!";
	if(.@Reset[3]) set reset_limit,reset_limit + 1;
	close;
}


//
//
//
//
// NPC Job todas as classes 
//
//
//
//
//

moc_para01,47,183,6	script	Job Master	123,{
function Get_Job_Equip;
// Checks if the Player has the required level.
// closes if not, returns if yes
function	Require_Level	{
	if (BaseLevel < getarg(0) || JobLevel < getarg(1)) {
		.@blvl = getarg(0) - BaseLevel;
		.@jlvl = getarg(1) - JobLevel;
		mes "Level requirement:";
		mes ((getarg(0)>1)? 
			"^bb0000"+getarg(0)+"^000000 (^bb0000Base^000000) / ":"")+"^00bb00"+
			getarg(1)+"^000000 (^00bb00Job^000000)";
		mes "You need " +
			((.@blvl > 0) ? "^bb0000"+.@blvl+"^000000 more base levels " + 
				((.@jlvl > 0) ? "and " : "") : "") +
			((.@jlvl > 0) ? "^00bb00"+.@jlvl+"^000000 more job levels " : "") +
			"to continue.";
		close;
	}
	return;
}

// Checks if the given eac is a baby class
function Is_Baby	{
	return ((getarg(0, eaclass())&EAJL_BABY)>0);
}

// Checks if the player can change to fourth class.
// Note: This does not include the level checks.
function	Can_Change_Fourth	{
	// To change to fourth class you need to be:
	// * Transcendent Third Class
	if( !.FourthClass )
		return false; // Fourth job change disabled
	if( (eaclass()&(EAJL_THIRD|EAJL_UPPER)) != (EAJL_THIRD|EAJL_UPPER) )
		return false; // Not Transcendent Third Class
	if( eaclass()&EAJL_FOURTH )
		return false; // Already Fourth Class
	if( roclass(eaclass()|EAJL_FOURTH) < 0 )
		return false; // Job has no Fourth Class
	return true;
}

// Checks if the player can change to third class.
// Note: This does not include the level checks.
function	Can_Change_Third	{
	// To change to third class you either need to be:
	// * Second Class
	// * Transcendent Second Class
	// * Baby Second Class
	if( !.ThirdClass )
		return false; // Third job change disabled
	if( !(eaclass()&EAJL_2) )
		return false; // Not second Class
	if( eaclass()&EAJL_THIRD )
		return false; // Already Third Class
	if( roclass(eaclass()|EAJL_THIRD) < 0 )
		return false; // Job has no third Class
	if( (eaclass()&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE )
		return false; // Exp. Super Novice equals 3rd Cls, but has it's own case
	if( Is_Baby() && (!.BabyClass || !.BabyThird) )
		return false; // No Baby (Third) change allowed
	return true;
}

function	Can_Rebirth	{
	// To rebirth, you need to be:
	// * Second Class
	if( !.RebirthClass )
		return false; // Rebirth disabled
	if( !(eaclass()&EAJL_2) )
		return false; // Not second Class
	if( eaclass()&(EAJL_UPPER|EAJL_THIRD) )
		return false; // Already Rebirthed/ Third Class
	if( roclass(eaclass()|EAJL_UPPER) < 0 )
		return false; // Job has no transcended class
	if( Is_Baby() && !.BabyClass )
		return false; // No Baby changes allowed
	return true;
}

// Checks if the given eac is a first class
function	Is_First_Cls	{
	return (getarg(0) <= EAJ_TAEKWON);
}

function	Check_Riding	{
	// Note: Why we should always check for Riding:
	// Mounts are considered as another class, which
	// would make this NPC bigger just to handle with
	// those special cases.
	if (checkfalcon() || checkcart() || checkriding() || ismounting()) {
		mes "Please remove your " +
			((checkfalcon()) ? "falcon" : "") +
			((checkcart()) ? "cart" : "") +
			((checkriding()) ? "Peco" : "") +
			((ismounting()) ? "mount" : "") +
			" before proceeding.";
		close;
	}
	return;
}
function	Check_SkillPoints	{
	if (.SkillPointCheck && SkillPoint) {
		mes "Please use all your skill points before proceeding.";
		close;
	}
	return;
}

// addJobOptions is essentially the same like
// setarray .@array[getarraysize(.@array)],opt1,opt2,...;
// It's just easier to read, since we're using it very often
function	Job_Options	{
	.@argcount = getargcount();
	.@arr_size = getarraysize(getarg(0));
	for( .@i = 1; .@i < .@argcount; .@i++) {
		setarray getelementofarray(getarg(0), .@arr_size++),getarg(.@i);
	}
}

// Begin of the NPC
	mes .NPCName$;
	Check_Riding();
	Check_SkillPoints();

	// initialisation
	.@eac = eaclass();
	.@fourth_possible = Can_Change_Fourth();
	.@third_possible = Can_Change_Third();
	.@rebirth_possible = Can_Rebirth();
	.@first_eac = .@eac&EAJ_BASEMASK;
	.@second_eac = .@eac&EAJ_UPPERMASK;
	// Note: These are already set in pc.cpp
	// BaseClass = roclass(.@eac&EAJ_BASEMASK) which is the players First Class
	// BaseJob = roclass(.@eac&EAJ_UPPERMASK) which is the players Second Class
	//dispbottom "Debug: eac ("+.@eac+"), third ("+.@third_possible+"), rebirth("+.@rebirth_possible+"), BaseClass ("+BaseClass+"), BaseJob ("+BaseJob+")";
		
	// From here on the jobmaster checks the current class
	// and fills the array `.@job_opt` with possible
	// job options for the player.
	
	if( .@rebirth_possible ) {
		// Rebirth option (displayed on the top of the menu)
		Require_Level(.Req_Rebirth[0], .Req_Rebirth[1]);
		Job_Options(.@job_opt, Job_Novice_High);
	}
	if( .@third_possible ) {
		// Third Job change (displayed below rebirth)
		Require_Level(.Req_Third[0], .Req_Third[1]);
		Job_Options(.@job_opt, roclass(.@eac|EAJL_THIRD));
	}
	if( .@fourth_possible ) {
		// Fourth Job change (displayed below rebirth)
		Require_Level(.Req_Fourth[0], .Req_Fourth[1]);
		Job_Options(.@job_opt, roclass(.@eac|EAJL_FOURTH));
	}
	 
	if (.SecondExpanded && 
	   (.@eac&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE && // is Super Novice
	   !(eaclass()&EAJL_THIRD) ) {				 	// not already Expanded SN
		// (Baby) Super Novice to Expanded (Baby) Super Novice
	   	if( !Is_Baby(.@eac) || (.BabyClass && .BabyExpanded) ) {
			// .BabyClass & .BabyExpanded must be enabled if the is a baby
			Require_Level(.Req_Exp_SNOVI[0], .Req_Exp_SNOVI[1]);
			Job_Options(.@job_opt,roclass(.@eac|EAJL_THIRD)); // Expanded SN is "third" cls
		}
	}
	
	if (.SecondExpanded && 
		((.@eac&(~EAJL_BABY)) == EAJ_NINJA || 		// is (Baby) Ninja
		(.@eac&(~EAJL_BABY)) == EAJ_GUNSLINGER)) {	// is (Baby) Gunslinger
		// (Baby) Ninja to (Baby) Kagerou / Oboro
		// (Baby) Gunslinger to (Baby) Rebellion
		if( !Is_Baby(.@eac) || (.BabyClass && .BabyExpanded) ) {
			// .BabyClass & .BabyExpanded must be enabled if the is a baby
			Require_Level(.Req_Exp_NJ_GS[0], .Req_Exp_NJ_GS[1]);
			// Kagerou, Oboro, Rebellion are considered as a 2-1 class
			Job_Options(.@job_opt, roclass(.@eac|EAJL_2_1));
		}
	}
	
	// Player is Job_Novice, Job_Novice_High or Job_Baby
	if (.@first_eac == EAJ_NOVICE && .@second_eac != EAJ_SUPER_NOVICE) {
		// MAPID_NOVICE, MAPID_SUPER_NOVICE, MAPID_NOVICE_HIGH, MAPID_BABY
		Require_Level(.Req_First[0], .Req_First[1]);
		switch(Class) {
			case Job_Novice:
				// First job change
				Job_Options(.@job_opt,Job_Swordman,
					Job_Mage, Job_Archer, Job_Acolyte, Job_Merchant, Job_Thief,
					Job_Super_Novice, Job_Taekwon, Job_Gunslinger, Job_Ninja);
				if( .BabyNovice )
					Job_Options(.@job_opt, Job_Baby);
				break;
			case Job_Novice_High:
				// Job change after rebirth
				if( .LastJob && lastJob )
					Job_Options(.@job_opt,
						roclass((eaclass(lastJob)&EAJ_BASEMASK)|EAJL_UPPER));
				else
					Job_Options(.@job_opt, 
						Job_Swordman_High, Job_Mage_High, Job_Archer_High,
						Job_Acolyte_High, Job_Merchant_High, Job_Thief_High);
				break;
			case Job_Baby:
				if( !.BabyClass )
					break;
				// First job change as a baby
				Job_Options(.@job_opt, Job_Baby_Swordman, Job_Baby_Mage,
					Job_Baby_Archer,Job_Baby_Acolyte, Job_Baby_Merchant,
					Job_Baby_Thief);
				if( .BabyExpanded )
					Job_Options(.@job_opt, Job_Super_Baby, Job_Baby_Taekwon,
						Job_Baby_Gunslinger, Job_Baby_Ninja);
				if( .BabySummoner )
					Job_Options(.@job_opt, Job_Baby_Summoner);
				break;
			default:
				mes "An error has occurred.";
				close;
		}
	} else if( Is_First_Cls(.@eac) || 				// First Class
			   Is_First_Cls(.@eac&(~EAJL_UPPER)) ||	// Trans. First Cls
			   (.BabyClass && Is_First_Cls(.@eac&(~EAJL_BABY))) ) {	// Baby First Cls
		// Player is First Class (not Novice)
		// most jobs should have two options here  (2-1 and 2-2)
		.@class1 = roclass(.@eac|EAJL_2_1); // 2-1
		.@class2 = roclass(.@eac|EAJL_2_2); // 2-2
		// dispbottom "Debug: Classes: class1 ("+.@class1+"), class2 ("+.@class2+")";
		if(.LastJob && lastJob && (.@eac&EAJL_UPPER)) {
			// Player is rebirth Cls and linear class changes are enforced
			Require_Level(.Req_Second[0], .Req_Second[1]);
			Job_Options(.@job_opt, lastJob + Job_Novice_High);
		} else {
			// Class is not enforced, player can decide.
			if( .@class1 > 0 ) { // 2-1
				Require_Level(.Req_Second[0], .Req_Second[1]);
				Job_Options(.@job_opt, .@class1);
			}
			if( .@class2 > 0 ) { // 2-2
				Require_Level(.Req_Second[0], .Req_Second[1]);
				Job_Options(.@job_opt, .@class2);
			}
		}
	}
	
	// Displaying the Job Menu defined by .@job_opt.
	// .@job_opt should not be changed below this line.
	function Job_Menu;
	Job_Menu(.@job_opt);
	close;

// Displays the job menu
function	Job_Menu	{
	// getarg(0) is the .@job_opt array holding all available job changes.
	function Confirm_Change;
	while(true) {
		.@opt_cnt =  getarraysize(getarg(0));
		if( .@opt_cnt <= 0 ) {
			mes "No more jobs are available.";
			close;
		}

		.@selected = 0; // Just a single job class given, no select needed
		if (.@opt_cnt > 1) {
			// Multiple job classes given. Select one and save it to .@class
			// After that confirm .@class
			mes "Select a job.";
			.@menu$ = "";
			for (.@i = 0; .@i < .@opt_cnt; .@i++) {
				if( getelementofarray(getarg(0), .@i) == Job_Novice_High)
					.@jobname$ = "^0055FFRebirth^000000";
				else
					.@jobname$ = jobname(getelementofarray(getarg(0), .@i));
				.@menu$ = .@menu$ + " ~ " + .@jobname$ + ":";
			}
			.@menu$ = .@menu$+" ~ ^777777Cancel^000000";
			.@selected = select(.@menu$) - 1;
			if( .@selected < 0 || .@selected >= .@opt_cnt )
				close;
			next;
			mes .NPCName$;
		}
		.@class = getelementofarray(getarg(0), .@selected);
		if ((.@class == Job_Super_Novice || .@class == Job_Super_Baby) &&
				BaseLevel < .SNovice) {
			// Special Level Requirement because Super Novice and
			// Super Baby can both be selected in one of the first class
			// changes. That's why the Level Requirement is after and not before
			// the selection.
			mes "A base level of " + .SNovice +
				" is required to turn into a " + jobname(.@class) + ".";
			return;
		}
		// Confirm the Class
		Confirm_Change(.@class, .@opt_cnt > 1);
		next;
		mes .NPCName$;
	}
	return;
}


// Executes the actual jobchange and closes.
function	Job_Change	{
	.@previous_class = Class;
	.@to_cls = getarg(0);
	next;
	mes .NPCName$;
	mes "You are now " + callfunc("F_InsertArticle", jobname(.@to_cls)) + "!";
	if (.@to_cls == Job_Novice_High && .LastJob)
		lastJob = Class; // Saves the lastJob for rebirth
	jobchange .@to_cls;
	if (.@to_cls == Job_Novice_High)
		resetlvl(1);
	else if (.@to_cls == Job_Baby) {
		resetstatus;
		resetskill;
		set SkillPoint,0;
	}
	specialeffect2 EF_ANGEL2;
	specialeffect2 EF_ELECTRIC;
	if (.@previous_class != Class) {
		if (.Platinum)
			callfunc "F_GetPlatinumSkills";
		if (.GetJobEquip)
			Get_Job_Equip();
	}
	close; // Always closes after the change
}

function	Confirm_Change	{
	// Player confirms he want to change into .@class
	.@class = getarg(0, -1);
	.@back = getarg(1, false);
	if( .@class < 0 || eaclass(.@class) == -1 ) {
		mes "Unknown Class Error.";
		close;
	}
	mes "Do you want to change into ^0055FF"+jobname(.@class)+"^000000 class?";
	.@job_option$ = " ~ Change into ^0055FF"+jobname(.@class)+"^000000 class";
	if( .@class == Job_Novice_High)
		.@job_option$ = " ~ ^0055FFRebirth^000000";
	
	if (select(.@job_option$+": ~ ^777777" + 
			((.@back) ?"Go back" : "Cancel") + "^000000") == 1) {
		Job_Change(.@class);
	}
	if (!.@back)
		close; // "Cancel" pressed
	return;
}

// Function which gives a job related item to the player
// the items are the rewards from the original job change quests
function	Get_Job_Equip	{
	// Note: The item is dropping, when the player can't hold it.
	// But that's better than not giving the item at all.
	.@eac = eaclass();
	if( .@eac&EAJL_FOURTH ) {
		// Fourth Class Items
		getitem 490087,1; // Hourglass Necklace
	} else if( .@eac&EAJL_THIRD ) {
		// Third Class Items
		getitem 2795,1;	//	Green Apple Ring for every 3rd Class
		switch(BaseJob) {
			// BaseJob of Third Cls
			// For Normal Third, Baby Third and Transcended Third Cls
			case Job_Knight:
				getitem 5746,1;	break;	//	Rune Circlet [1]
			case Job_Wizard:
				getitem 5753,1;	break;	//	Magic Stone Hat [1]
			case Job_Hunter:
				getitem 5748,1;	break;	//	Sniper Goggle [1]
			case Job_Priest:
				getitem 5747,1;	break;	//	Mitra [1]
			case Job_Blacksmith:
				getitem 5749,1;	break;	//	Driver Band [1]
			case Job_Assassin:
				getitem 5755,1;	break;	//	Silent Executor [1]
			case Job_Crusader:
				getitem 5757,1;	break;	//	Dip Schmidt Helm [1]
			case Job_Sage:
				getitem 5756,1;	break;	//	Wind Whisper [1]
			case Job_Bard:
				getitem 5751,1;	break;	//	Maestro Song's Hat [1]
			case Job_Dancer:
				getitem 5758,1;	break;	//	Dying Swan [1]
			case Job_Monk:
				getitem 5754,1;	break;	//	Blazing Soul [1]
			case Job_Alchemist:
				getitem 5752,1;	break;	//	Midas Whisper[1]
			case Job_Rogue:
				getitem 5750,1; 		//	Shadow Handicraft [1]
				getitem 6121,1;			//	Makeover Brush
				getitem 6122,1;	break;	//	Paint Brush
		}
	} else if (.@eac&EAJL_2) {
		// Second Class (And not Third Class)
		switch(BaseJob) {
			// Second Class
			case Job_Knight:
				getitem 1163,1;	break;	//	Claymore [0]
			case Job_Priest:
				getitem 1522,1;	break;	//	Stunner [0]
			case Job_Wizard:
				getitem 1617,1;	break;	//	Survivor's Rod [0]
			case Job_Blacksmith:
				getitem 1360,1;	break;	//	Two-Handed-Axe [1]
			case Job_Hunter:
				getitem 1718,1;	break;	//	Hunter Bow [0]
			case Job_Assassin:
				getitem 1254,1;	break;	//	Jamadhar [0]
			case Job_Crusader:
				getitem 1410,1;	break;	//	Lance [0]
			case Job_Monk:
				getitem 1807,1;	break;	//	Fist [0]
			case Job_Sage:
				getitem 1550,1;	break;	//	Book [3]
			case Job_Rogue:
				getitem 1222,1;	break;	//	Damascus [1]
			case Job_Alchemist:
				getitem 1126,1;	break;	//	Saber [2]
			case Job_Bard:
				getitem 1907,1;	break;	//	Guitar [0]
			case Job_Dancer:
				getitem 1960,1;	break;	//	Whip [1]
			case Job_Super_Novice:
				getitem 1208,1;	break;	//	Main Gauche [4]
			case Job_Star_Gladiator:
				getitem 1550,1;	break;	//	Book [3]
			case Job_Soul_Linker:
				getitem 1617,1;	break;	//	Survivor's Rod [0]
		}
	} else {
		// Neither Second or Third Cls
		// => First Cls or not covered by the switch
		switch(BaseClass) {
			// First Class
			case Job_Swordman:
				getitem 1108,1;	break;	//	Blade [4]
			case Job_Mage:
				getitem 1602,1;	break;	//	Rod [4]
			case Job_Archer:
				getitem 1705,1;	break;	//	Composite Bow [4]
			case Job_Acolyte:
				getitem 1505,1;	break;	//	Mace [4]
			case Job_Merchant:
				getitem 1302,1;	break;	//	Axe [4]
			case Job_Thief:
				getitem 1208,1;	break;	//	Main Gauche [4]
			case Job_Gunslinger:
				getitem 13101,1; break;	//	Six Shooter [2]
			case Job_Ninja:
				getitem 13010,1; break;	//	Asura [2]
		}
	}
	return;
}

OnInit:
	// Initialisation, do not edit these
	.NPCName$ = "[Job Master]";
	
	// Settings
	.FourthClass = true;				// Enable fourth classes?
	.ThirdClass = true;					// Enable third classes?
	.RebirthClass = true;				// Enable rebirth classes?
	.SecondExpanded = true;				// Enable new expanded second classes: Ex. Super Novice, Kagerou/Oboro, Rebellion?
	.BabyNovice = true;					// Enable Baby novice classes? Disable it if you like player must have parent to get job baby.
	.BabyClass = true;					// Enable Baby classes?
	.BabyThird = true;					// Enable Baby third classes?
	.BabyExpanded = true;				// Enable Baby Expanded classes: Ex. Baby Ninja, Baby Taekwon, etc.
	.BabySummoner = true;				// Enable Baby Summoner?
	.LastJob = true;					// Enforce linear class changes?
	.SkillPointCheck = true;			// Force player to use up all skill points?
	.Platinum = true;					// Get platinum skills automatically?
	.GetJobEquip = false;				// Get job equipment (mostly weapons) on job change?

	// Level Requirements
	setarray .Req_First[0],1,10; 		// Minimum base level, job level to turn into 1st class
	setarray .Req_Second[0],1,40; 		// Minimum base level, job level to turn into 2nd class
	setarray .Req_Rebirth[0],99,50;		// Minimum base level, job level to rebirth
	setarray .Req_Third[0],99,50;		// Minimum base level, job level to change to third class
	setarray .Req_Fourth[0],200,70;		// Minimum base level, job level to change to fourth class
	setarray .Req_Exp_NJ_GS[0],99,70; 	// Minimum base level, job level to turn into Expanded Ninja and Gunslinger
	setarray .Req_Exp_SNOVI[0],99,99; 	// Minimum base level, job level to turn into Expanded Super Novice
	.SNovice = 45;						// Minimum base level to turn into Super Novice
	
	// Setting adjustments by PACKETVER
	if( PACKETVER < 20161207 ) {
		if( .BabyExpanded )
			debugmes "jobmaster: BabyExpanded is disabled due to outdated PACKETVER.";
		if( .BabySummoner )
			debugmes "jobmaster: BabySummoner is disabled due to outdated PACKETVER.";
		.BabyExpanded = false;
		.BabySummoner = false;
	}
	end;
}




moc_para01,35,20,2	duplicate(Medica)	Medica#mora	569


 