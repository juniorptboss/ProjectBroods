//===== rAthena Script ======================================= 
//= Eden Group Quests - Common NPCs
//===== By: ================================================== 
//= L0ne_W0lf
//===== Current Version: ===================================== 
//= 2.0
//===== Compatible With: ===================================== 
//= rAthena Project
//===== Description: ========================================= 
//= Eden Group Headquarter NPC's.
//===== Additional Comments: ================================= 
//= 1.0 First Version.
//= 1.1 Removed showevent use, and use of duplicates.
//=     Commented out warps that should not be active.
//= 1.2 Reduced 300+ copy-paste lines to 1 duplicated NPC. [Brian]
//= 1.3 Some little optimization here and there. [Masao]
//= 1.4 Updated to match the new Izlude Map. [Masao]
//= 1.5 Added some missing Eden Group Teleport Officers. [Masao]
//= 1.6 Added Izlude RE coordinates. [Euphy]
//= 1.7 Added Malaya teleporter. [Euphy]
//= 1.8 Updated to match the latest official script. [Euphy]
//= 1.9 Added support to Para_Team_Mark_ in Eden Group. [AtlantisRO/Ragno]
//= 2.0 Added use of F_HasEdenGroupMark function. [Ragno]
//============================================================

// Common NPCs :: lv_tre
//============================================================
moc_para01,27,35,5	script	Secretaria Lime Evenor	4_F_EDEN_OFFICER,{
	if (checkweight(1201,1) == 0 || (MaxWeight - Weight) < 2000) {
		mes "- Wait a minute !! -";
		mes "- Currently you're carrying -";
		mes "- too many items with you. -";
		mes "- Please try again -";
		mes "- after you lose some weight. -";
		close;
	}
	if (countitem(6219) > 0) {
		mes "[Lime Evenor]";
		mes "Thanks to many adventurers visiting our Eden Group, we've recently prepared a new version of Eden Group Mark for our visitors.";
		mes "And it is also possible to exchange old version of Eden Group Mark into a new one.";
		next;
		mes "[Lime Evenor]";
		mes "Though it has a slight time delay, this new version of Eden Group Mark will send you back to current saved location.";
		mes "Would you like to exchange yours?";
		next;
		if (select("Sure:I'm good.") == 2){
			mes "[Lime Evenor]";
			mes "What possible reason would you have... to not exchange?";
			close;
		}
		delitem 6219,1;
		getitem 22508,1;
		mes "[Lime Evenor]";
		mes "There you go. Come back again~";
		close;
	}
	mes "[Lime Evenor]";
	mes "Bem-vindo, ..hmmm...acho que sei o seu nome...";
	next;
	mes "[Lime Evenor]";
	mes ".. ah, ^3131FF"+strcharinfo(0)+"^000000, que veio do outro mundo.";
	next;
	mes "[Lime Evenor]";
	mes "Bom, pode me chamar de Lime Evenor, estou aqui para auxiliar suas aventuras em Dasnora. Por favor, me informe sobre os detalhes que precisa saber.";
	next;
	while (1) {
		switch (select("Qual foi dessa turma?:Quero fazer parte disso!:Cancelar.")) {
		case 1:
			mes "[Lime Evenor]";
			mes "Um grupo que ajuda os aventureiros a lidar com os problemas em Dasnora.";
			next;
			mes "[Lime Evenor]";
			mes "Se as pessoas precisarem de ajuda, colocamos o caso no mural e apresentamos aos nossos aventureiros que ficam dispostos para ajudar os necessitados.";
			next;
			mes "[Lime Evenor]";
			mes "Nos revisamos a quest e postamos no mural. Sempre tentamos recompensar o aventureiro como forma de pagamento.";
			next;
			mes "[Lime Evenor]";
			mes "Se quiser se familiarizar no mundo, esta eh uma otima maneira de seguir.";
			next;
			mes "[Lime Evenor]";
			mes "Poder viajar pelo mundo e fazer novos amigos enquanto nos ajuda. Seu nome honroso vai ser espalhado por terras distantes.";
			next;
			break;
		case 2:
			if (!callfunc("F_HasEdenGroupMark")) {
				mes "[Lime Evenor]";
				mes "Que bom! Vamos ao que interessa.";
				mes "Tem certeza que vai nos ajudar?";
				next;
				switch (select("Sim, quero ajudar.:Negativo, tenho mais oque fazer.")) {
				case 1:
					mes "[Lime Evenor]";
					mes "Aright. Excellent! Please write down your name here.";
					input .@input$;
					next;
					mes "[Lime Evenor]";
					mes "Are you done?";
					mes "Let me see.";
					next;
					mes "[Lime Evenor]";
					mes "Your name is ^3131FFBo"+.@input$+"Ba^000000...? Is that right?";
					mes "Huh? Isn't it??";
					next;
					emotion ET_SWEAT;
					mes "[Lime Evenor]";
					mes "Hmm, that isn't what you wrote?";
					mes "Ok, hmm, it seems a bit hard to read.";
					next;
					mes "[Lime Evenor]";
					mes "Would you please write your name again? Please write it ^3131FFClearly^000000.";
					input .@input$;
					next;
					mes "[Lime Evenor]";
					mes "Ah~ ha. You are ^3131FF"+strcharinfo(0)+"^000000.";
					mes "I got it right this time.";
					next;
					emotion ET_BEST;
					mes "[Lime Evenor]";
					mes "We already put your name on the list.";
					mes "Welcome to Eden's group new member!";
					next;
					mes "[Lime Evenor]";
					mes "Hopefully you can do great work as an Eden's member.";
					getitem 22508,1; //Para_Team_Mark_
					next;
					break;
				case 2:
					mes "[Lime Evenor]";
					mes "Do you still have questions about Eden Group?";
					next;
					break;
				}
			} else {
				mes "[Lime Evenor]";
				mes "You are already a member of Eden Group.";
				next;
			}
			break;
		case 3:
			mes "[Lime Evenor]";
			mes "If you have any questions please come back again.";
			close;
		}
	}
}

		// ----------------------- Retirado---------------------------------------
		/*
		case 3:
			mes "[Lime Evenor]";
			mes "Do you want to register some missions that you want us to do?";
			next;
			if(select("Yes, I want to register.:No, I don't.") == 1) {
				mes "[Lime Evenor]";
				mes "Alrigh. Please write down your name on it.";
				input .@input$;
				next;
				mes "[Lime Evenor]";
				mes "^3131FF"+strcharinfo(0)+"^000000.. Is that your name?";
				mes "Hmm, your handwriting is not clear. I can't read. it";
				next;
				mes "[Lime Evenor]";
				mes "^3131FF"+strcharinfo(0)+"^000000, tell me what you want to register for.";
				mes "Which map should we go to?";
				input .@input$;
				next;
				mes "[Lime Evenor]";
				mes "^3131FFMission Map: "+.@inputstr$+"^000000";
				mes "hum, I will note that.";
				next;
				mes "[Lime Evenor]";
				mes "Please let me know what kind of missions your are lookng for.";
				mes "It should be briefly like 'Hunt 10 Porings.'";
				input .@input$;
				next;
				mes "[Lime Evenor]";
				mes "Are you done?";
				mes "Let me check.";
				next;
				mes "[Lime Evenor]";
				mes "Huh...........";
				next;
				mes "[Lime Evenor]";
				mes "Hum.. huh??..................";
				next;
				emotion ET_THINK;
				mes "[Lime Evenor]";
				mes "I think you should complete one of our missions first before you take up a new mission.";
				next;
				emotion ET_HNG;
				mes "[Lime Evenor]";
				mes "^3131FFClient: Lime Evenor^000000";
				mes "^3131FFMission: Practice your handwriting for one month.^000000";
				mes "You've got really bad penmanship!";
				next;
				mes "[Lime Evenor]";
				mes "^3131FFMission:"+.@input$+"^000000";
				mes "Anyway, you are done registering for a new mission.";
				next;
				mes "[Lime Evenor]";
				mes "Missions are fully booked. You have to wait for an spot to clear up.";
				mes "Please kindly wait until your turn.";
				next;
			}
			break;
		case 4:
			if (callfunc("F_HasEdenGroupMark")) {
				mes "[Lime Evenor]";
				mes "Would like to try some missions as an Eden member?";
				next;
				mes "[Lime Evenor]";
				mes "Check the right side of the bulletin board, there are various kinds of missions waiting for you.";
				mes "Please carefully read the mission list and the qualifications and choose one of them.";
				next;
			}
			else {
				mes "[Lime Evenor]";
				mes "You need to join Eden Group first if you want to do some missions.";
				close;
			}
			break;	
		

		*/

-	script	Eden Teleport Officer#0::eto	-1,{
	mes "[Eden Teleport Officer]";
	mes "Those who are wandering around this strange world with aimless eyes listen up and come to me!";
	mes "Eden group is here to help you and will show you the great future.";
	next;
	mes "[Eden Teleport Officer]";
	mes "You have nothing to do but waste your time?";
	mes "You are eager to do something good but no one offers you work?";
	mes "Would you like to be a problem solver?";
	mes "Eden group is here to solve your problem.";
	next;
	switch (select("Move to Eden Group.:Don't want to talk anymore.")) {
	case 1:
		mes "[Eden Teleport Officer]";
		mes "Let's go to our secret base!";
		set nak_warp,strnpcinfo(2);
		close2;
		warp "moc_para01",31,14;
		end;
	case 2:
		mes "[Eden Teleport Officer]";
		mes "If you don't know what to do for your future, don't hesitate to tell me. Just drop by and talk to me! Ok?";
		close;
	}
}
prontera,124,76,3	duplicate(eto)	Eden Teleport Officer#1	729
moc_ruins,68,164,3	duplicate(eto)	Eden Teleport Officer#2	729
geffen,132,66,3	duplicate(eto)	Eden Teleport Officer#3	729
alberta,124,67,3	duplicate(eto)	Eden Teleport Officer#4	729
aldebaran,133,119,5	duplicate(eto)	Eden Teleport Officer#5	729
izlude_in,68,162,1	duplicate(eto)	Eden Teleport Officer#6	729
prt_church,103,78,3	duplicate(eto)	Eden Teleport Officer#7	729
geffen_in,160,104,5	duplicate(eto)	Eden Teleport Officer#8	729
moc_prydb1,53,126,3	duplicate(eto)	Eden Teleport Officer#9	729
alberta_in,75,39,3	duplicate(eto)	Eden Teleport Officer#10	729
payon_in02,58,58,1	duplicate(eto)	Eden Teleport Officer#11	729
payon,177,111,3	duplicate(eto)	Eden Teleport Officer#12	729
que_ng,33,73,3	duplicate(eto)	Eden Teleport Officer#13	729
que_ng,144,161,5	duplicate(eto)	Eden Teleport Officer#14	729
yuno,144,189,5	duplicate(eto)	Eden Teleport Officer#15	729
rachel,125,144,3	duplicate(eto)	Eden Teleport Officer#16	729
comodo,202,151,4	duplicate(eto)	Eden Teleport Officer#17	729
hugel,93,153,4	duplicate(eto)	Eden Teleport Officer#18	729
veins,220,109,4	duplicate(eto)	Eden Teleport Officer#19	729
einbroch,250,211,4	duplicate(eto)	Eden Teleport Officer#20	729
lighthalzen,164,86,4	duplicate(eto)	Eden Teleport Officer#21	729
amatsu,100,145,5	duplicate(eto)	Eden Teleport Officer#22	729
ayothaya,221,191,3	duplicate(eto)	Eden Teleport Officer#23	729
louyang,224,107,3	duplicate(eto)	Eden Teleport Officer#24	729
gonryun,162,122,5	duplicate(eto)	Eden Teleport Officer#25	729
moscovia,209,197,5	duplicate(eto)	Eden Teleport Officer#26	729
brasilis,191,224,3	duplicate(eto)	Eden Teleport Officer#27	729
dewata,192,193,5	duplicate(eto)	Eden Teleport Officer#28	729
morocc,161,97,5	duplicate(eto)	Eden Teleport Officer#29	729
izlude,131,148,4	duplicate(eto)	Eden Teleport Officer#30	729
izlude_a,131,148,4	duplicate(eto)	Eden Teleport Officer#30::eto_iz_a	729
izlude_b,131,148,4	duplicate(eto)	Eden Teleport Officer#30::eto_iz_b	729
izlude_c,131,148,4	duplicate(eto)	Eden Teleport Officer#30::eto_iz_c	729
izlude_d,131,148,4	duplicate(eto)	Eden Teleport Officer#30::eto_iz_d	729
umbala,105,158,3	duplicate(eto)	Eden Teleport Officer#31	729
malaya,225,218,1	duplicate(eto)	Eden Teleport Officer#32	729
verus04,116,243,0	duplicate(eto)	Eden Teleport Officer#33	729

moc_para01,30,10,0	script	#eden_out	45,1,1,{
OnTouch:
	switch (nak_warp) {
		case 1: warp "prontera",116,72; end;
		case 2: warp "moc_ruins",64,161; end;
		case 3: warp "geffen",120,39; end;
		case 4: warp "alberta",117,56; end;
		case 5: warp "aldebaran",168,112; end;
		case 6: warp "izlude_in",73,165; end;
		case 7: warp "prt_church",99,78; end;
		case 8: warp "geffen_in",162,99; end;
		case 9: warp "moc_prydb1",51,118; end;
		case 10: warp "alberta_in",73,43; end;
		case 11: warp "payon_in02",64,60; end;
		case 12: warp "payon",161,58; end;
		case 13: warp "que_ng",33,63; end;
		case 14: warp "que_ng",144,166; end;
		case 15: warp "yuno",158,125; end;
		case 16: warp "rachel",115,125; end;
		case 17: warp "comodo",192,145; end;
		case 18: warp "hugel",88,148; end;
		case 19: warp "veins",216,104; end;
		case 20: warp "einbroch",246,204; end;
		case 21: warp "lighthalzen",159,95; end;
		case 22: warp "amatsu",110,150; end;
		case 23: warp "ayothaya",217,178; end;
		case 24: warp "louyang",217,103; end;
		case 25: warp "gonryun",155,120; end;
		case 26: warp "moscovia",218,198; end;
		case 27: warp "brasilis",190,220; end;
		case 28: warp "dewata",192,182; end;
		case 29: warp "morocc",161,97; end;
		case 30: warp "izlude",134,118; end;	// Old coordinates: (127,142)
		case 31: warp "umbala",94,154; end;
		case 32: warp "malaya",234,199; end;
		case 33: warp "verus04",115,243; end;
		default: warp "prontera",116,72; end;
	}
	end;
}

moc_para01,47,39,3	script	#warp_2_pass	111,{
	if (callfunc("F_HasEdenGroupMark")) {
		mes "[Lime Evenor]";
		mes "Oh, it is an exclusive place only for Eden's members.";
		mes "If you are a member, you can come whenever you want!";
		next;
		switch (select("Enter.:Don't Enter.")) {
		case 1:
			mes "This door is beautifully decorated but seems a little bit too heavy.";
			close2;
			warp "moc_para01",106,14;
			end;
		case 2:
			mes "[Lime Evenor]";
			mes "Well, if you are not interested.";
			close;
		}
	}
	mes "[Lime Evenor]";
	mes "Oh, this is an exclusive place for Eden's members only.";
	mes "If you want to go inside, you have to join the Eden Group.";
	close;
}

moc_para01,16,22,7	script	Old Adventurer#eden	900,{
	mes "[Old Adventurer]";
	mes "Harsh, I am strong enough even if I look old! What is her name? Lime Evenor? She just ignores me like I am a some kind of old senile bastard.";
	next;
	mes "[Old Adventurer]";
	mes "I came here to join the Eden group! I don't deserve this!";
	mes "Do you also think I look like I'm senile?";
	close;
}

moc_para01,182,48,3	script	Eden's Chief#eden	886,{
	set .@eggf,rand(1,118);
	set .@eggf_1,.@eggf + 1;
	set .@eggf_2,.@eggf + 2;
	set .@eggf_6,.@eggf + 6;
	mes "[Eden's Chief]";
	mes ""+.@eggf+".. "+.@eggf_1+"... "+.@eggf_2+".... "+.@eggf_6+"..?";
	next;
	emotion ET_CRY;
	mes "[Eden's Chief]";
	mes "Oh, Shoot! How many eggs have I done?";
	mes "Aww!!! I totally forgot! I have to count again!";
	next;
	emotion ET_CRY;
	mes "[Eden's Chief]";
	mes "Why have you asked me to do this? What kind of mission is that?";
	next;
	emotion ET_CRY;
	mes "[Eden's Chief]";
	mes "What are you going to with all of those fried eggs? I am sure you can't eat all of them. You just want to bother me, right?";
	close;
}

moc_para01,172,28,5	script	Eden's Intern#eden	883,{
	mes "[Eden's Intern]";
	mes "Actually, I realized that.";
	next;
	mes "[Eden's Intern]";
	mes "We have to work really hard unless you want to fail.";
	next;
	mes "[Eden's Intern]";
	mes "But, I have never learned about pharmaceuticals yet.";
	next;
	mes "[Eden's Intern]";
	mes "I'm going to fail. I can't do this.";
	close;
}

moc_para01,20,35,5	script	Office Assistant Neede	814,{
	mes "[Neede]";
	mes "I became a Eden's member several years ago, but it feels like it was yesterday.";
	mes "I have been doing lots of work, so I didn't even notice how many years I spent here.";
	next;
	mes "[Neede]";
	mes "It reminds me that it was like a war everyday.";
	next;
	mes "[Neede]";
	mes "The chief of ^3131FFthe restaurant on the right side^000000";
	mes "uses too much seasoning every time he cooks, the smell is all over the lobby. We have to open the window regularly because we can't stand the smell!";
	next;
	mes "[Neede]";
	mes "And, do you see the ^3131FFgymnasium^000000 on the cross of ^3131FFthe north side of the lobby^000000? They always shout when they exercise, I can even hear them from here!";
	next;
	emotion ET_ANGER;
	mes "[Neede]";
	mes "Besides, the weird girl from ^3131FFthe second floor^000000 is crying all the time. Her cries drive me crazy.";
	next;
	mes "[Neede]";
	mes "Ah, that weird girl is actually our boss...";
	next;
	mes "[Neede]";
	mes "I don't know what she has been up to. But she cries and shouts all the time. Oh, sometimes I hear 'Bang!', loud booming sounds... I don't know where it came from.";
	next;
	emotion ET_HUK;
	mes "[Neede]";
	mes "Wait!";
	mes "Shh! It is a secret, you can't tell anybody!";
	next;
	mes "[Neede]";
	emotion ET_OHNO;
	mes "I don't trust Evenor. She never shows her feelings... she's going to snitch on me to my boss.";
	next;
	emotion ET_HNG, getnpcid(0, "Secretary Lime Evenor");
	mes "[Lime Evenor]";
	mes "I am not that kind of girl.";
	next;
	emotion ET_KEK;
	mes "[Neede]";
	mes "Huh? Did you hear that? Gosh~!";
	close;
}

function	script	F_HasEdenGroupMark	{
	return (countitem(6219) > 0 || countitem(22508) > 0);
}


// =============================================
//					NPC's Custom
// =============================================

-	script	Medica	-1,{

	.@Price = 0;	// Zeny required for heal
	.@Buffs = 0;	// Also buff players? (1: yes / 0: no)
	.@Delay = 0;	// Heal delay, in seconds

	if (@HD > gettimetick(2))
		end;
	if (.@Price) {
		message strcharinfo(0), "Healing costs " + callfunc("F_InsertComma",.@Price) + " Zeny.";
		if (Zeny < .@Price)
			end;
		if (select("^0055FFHeal^000000:^777777Cancel^000000") == 2)
			end;
		Zeny -= .@Price;
	}
	specialeffect2 EF_HEAL2;
	percentheal 100,100;
	if (.@Buffs) {
		specialeffect2 EF_INCAGILITY;
		sc_start SC_INCREASEAGI,240000,10;
		specialeffect2 EF_BLESSING;
		sc_start SC_BLESSING,240000,10;
	}
	if (.@Delay)
		@HD = gettimetick(2) + .@Delay;
	end;
}



//
// NPC para receber as skills Platinum
//


moc_para01,36,185,4	script	Platinum Skill NPC	94,{
	mes "[Platinum Skill NPC]";
	mes "I can give you the special skills available to your job.";
	mes "Would you like these skills now?";
	next;
	if (select("Yes Please:No") == 2) {
		mes "[Platinum Skill NPC]";
		mes "Have a nice day... >.>";
		close;
	}
	callfunc "F_GetPlatinumSkills";
	mes "[Platinum Skill NPC]";
	mes "There you go!";
	close;
}


//
// NPC reset Skill
//

moc_para01,44,21,2	script	Reset Girl	124,{
	//	 		Skills,	Stats,	Both,	Limit
	setarray .@Reset,	100,	100,	100,	0;
	mes "[Reset Girl]";
	if(.@Reset[3] && reset_limit > .@Reset[3]) {
		mes "Sorry you can only reset "+callfunc("F_InsertPlural",.@Reset[3],"time")+" in your life.";
		close;
	}
	mes "I am the Reset Girl.";
	mes "Reset Stats: "+ callfunc("F_InsertComma",.@Reset[1]) +"z";
	mes "Reset Skills: "+ callfunc("F_InsertComma",.@Reset[0]) +"z";
	mes "Reset Both: "+ callfunc("F_InsertComma",.@Reset[2]) +"z";
	if(.@Reset[3]) mes "You may only reset "+callfunc("F_InsertPlural",.@Reset[3],"time")+", so use "+((.@Reset[3]>1)?"them":"it")+" wisely.";
	mes "Please select the service you want:";
	next;
	set .@i,(select("^FF3355Reset Skills:Reset Stats:Reset Both^000000:Cancel"));
	if(.@i > 3) close;
	mes "[Reset Girl]";
	if (Zeny < .@Reset[.@i-1]) {
		mes "Sorry, you don't have enough Zeny.";
		close;
	}
	if(.@Reset[3]){
		mes "You can only reset "+callfunc("F_InsertPlural",.@Reset[3],"time")+" in your life, are you sure?";
		if(select("Let me think:That's fine") == 1) close;
	}
	set Zeny, Zeny-.@Reset[.@i-1];
	if(.@i&1){
		sc_end_class;
		ResetSkill;
	}
	if(.@i&2) ResetStatus;
	mes "There you go!";
	if(.@Reset[3]) set reset_limit,reset_limit + 1;
	close;
}


//
//
//
//
// NPC Job todas as classes 
//
//
//
//
//

moc_para01,47,183,6	script	Job Master	123,{
function Get_Job_Equip;
// Checks if the Player has the required level.
// closes if not, returns if yes
function	Require_Level	{
	if (BaseLevel < getarg(0) || JobLevel < getarg(1)) {
		.@blvl = getarg(0) - BaseLevel;
		.@jlvl = getarg(1) - JobLevel;
		mes "Level requirement:";
		mes ((getarg(0)>1)? 
			"^bb0000"+getarg(0)+"^000000 (^bb0000Base^000000) / ":"")+"^00bb00"+
			getarg(1)+"^000000 (^00bb00Job^000000)";
		mes "You need " +
			((.@blvl > 0) ? "^bb0000"+.@blvl+"^000000 more base levels " + 
				((.@jlvl > 0) ? "and " : "") : "") +
			((.@jlvl > 0) ? "^00bb00"+.@jlvl+"^000000 more job levels " : "") +
			"to continue.";
		close;
	}
	return;
}

// Checks if the given eac is a baby class
function Is_Baby	{
	return ((getarg(0, eaclass())&EAJL_BABY)>0);
}

// Checks if the player can change to fourth class.
// Note: This does not include the level checks.
function	Can_Change_Fourth	{
	// To change to fourth class you need to be:
	// * Transcendent Third Class
	if( !.FourthClass )
		return false; // Fourth job change disabled
	if( (eaclass()&(EAJL_THIRD|EAJL_UPPER)) != (EAJL_THIRD|EAJL_UPPER) )
		return false; // Not Transcendent Third Class
	if( eaclass()&EAJL_FOURTH )
		return false; // Already Fourth Class
	if( roclass(eaclass()|EAJL_FOURTH) < 0 )
		return false; // Job has no Fourth Class
	return true;
}

// Checks if the player can change to third class.
// Note: This does not include the level checks.
function	Can_Change_Third	{
	// To change to third class you either need to be:
	// * Second Class
	// * Transcendent Second Class
	// * Baby Second Class
	if( !.ThirdClass )
		return false; // Third job change disabled
	if( !(eaclass()&EAJL_2) )
		return false; // Not second Class
	if( eaclass()&EAJL_THIRD )
		return false; // Already Third Class
	if( roclass(eaclass()|EAJL_THIRD) < 0 )
		return false; // Job has no third Class
	if( (eaclass()&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE )
		return false; // Exp. Super Novice equals 3rd Cls, but has it's own case
	if( Is_Baby() && (!.BabyClass || !.BabyThird) )
		return false; // No Baby (Third) change allowed
	return true;
}

function	Can_Rebirth	{
	// To rebirth, you need to be:
	// * Second Class
	if( !.RebirthClass )
		return false; // Rebirth disabled
	if( !(eaclass()&EAJL_2) )
		return false; // Not second Class
	if( eaclass()&(EAJL_UPPER|EAJL_THIRD) )
		return false; // Already Rebirthed/ Third Class
	if( roclass(eaclass()|EAJL_UPPER) < 0 )
		return false; // Job has no transcended class
	if( Is_Baby() && !.BabyClass )
		return false; // No Baby changes allowed
	return true;
}

// Checks if the given eac is a first class
function	Is_First_Cls	{
	return (getarg(0) <= EAJ_TAEKWON);
}

function	Check_Riding	{
	// Note: Why we should always check for Riding:
	// Mounts are considered as another class, which
	// would make this NPC bigger just to handle with
	// those special cases.
	if (checkfalcon() || checkcart() || checkriding() || ismounting()) {
		mes "Please remove your " +
			((checkfalcon()) ? "falcon" : "") +
			((checkcart()) ? "cart" : "") +
			((checkriding()) ? "Peco" : "") +
			((ismounting()) ? "mount" : "") +
			" before proceeding.";
		close;
	}
	return;
}
function	Check_SkillPoints	{
	if (.SkillPointCheck && SkillPoint) {
		mes "Please use all your skill points before proceeding.";
		close;
	}
	return;
}

// addJobOptions is essentially the same like
// setarray .@array[getarraysize(.@array)],opt1,opt2,...;
// It's just easier to read, since we're using it very often
function	Job_Options	{
	.@argcount = getargcount();
	.@arr_size = getarraysize(getarg(0));
	for( .@i = 1; .@i < .@argcount; .@i++) {
		setarray getelementofarray(getarg(0), .@arr_size++),getarg(.@i);
	}
}

// Begin of the NPC
	mes .NPCName$;
	Check_Riding();
	Check_SkillPoints();

	// initialisation
	.@eac = eaclass();
	.@fourth_possible = Can_Change_Fourth();
	.@third_possible = Can_Change_Third();
	.@rebirth_possible = Can_Rebirth();
	.@first_eac = .@eac&EAJ_BASEMASK;
	.@second_eac = .@eac&EAJ_UPPERMASK;
	// Note: These are already set in pc.cpp
	// BaseClass = roclass(.@eac&EAJ_BASEMASK) which is the players First Class
	// BaseJob = roclass(.@eac&EAJ_UPPERMASK) which is the players Second Class
	//dispbottom "Debug: eac ("+.@eac+"), third ("+.@third_possible+"), rebirth("+.@rebirth_possible+"), BaseClass ("+BaseClass+"), BaseJob ("+BaseJob+")";
		
	// From here on the jobmaster checks the current class
	// and fills the array `.@job_opt` with possible
	// job options for the player.
	
	if( .@rebirth_possible ) {
		// Rebirth option (displayed on the top of the menu)
		Require_Level(.Req_Rebirth[0], .Req_Rebirth[1]);
		Job_Options(.@job_opt, Job_Novice_High);
	}
	if( .@third_possible ) {
		// Third Job change (displayed below rebirth)
		Require_Level(.Req_Third[0], .Req_Third[1]);
		Job_Options(.@job_opt, roclass(.@eac|EAJL_THIRD));
	}
	if( .@fourth_possible ) {
		// Fourth Job change (displayed below rebirth)
		Require_Level(.Req_Fourth[0], .Req_Fourth[1]);
		Job_Options(.@job_opt, roclass(.@eac|EAJL_FOURTH));
	}
	 
	if (.SecondExpanded && 
	   (.@eac&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE && // is Super Novice
	   !(eaclass()&EAJL_THIRD) ) {				 	// not already Expanded SN
		// (Baby) Super Novice to Expanded (Baby) Super Novice
	   	if( !Is_Baby(.@eac) || (.BabyClass && .BabyExpanded) ) {
			// .BabyClass & .BabyExpanded must be enabled if the is a baby
			Require_Level(.Req_Exp_SNOVI[0], .Req_Exp_SNOVI[1]);
			Job_Options(.@job_opt,roclass(.@eac|EAJL_THIRD)); // Expanded SN is "third" cls
		}
	}
	
	if (.SecondExpanded && 
		((.@eac&(~EAJL_BABY)) == EAJ_NINJA || 		// is (Baby) Ninja
		(.@eac&(~EAJL_BABY)) == EAJ_GUNSLINGER)) {	// is (Baby) Gunslinger
		// (Baby) Ninja to (Baby) Kagerou / Oboro
		// (Baby) Gunslinger to (Baby) Rebellion
		if( !Is_Baby(.@eac) || (.BabyClass && .BabyExpanded) ) {
			// .BabyClass & .BabyExpanded must be enabled if the is a baby
			Require_Level(.Req_Exp_NJ_GS[0], .Req_Exp_NJ_GS[1]);
			// Kagerou, Oboro, Rebellion are considered as a 2-1 class
			Job_Options(.@job_opt, roclass(.@eac|EAJL_2_1));
		}
	}
	
	// Player is Job_Novice, Job_Novice_High or Job_Baby
	if (.@first_eac == EAJ_NOVICE && .@second_eac != EAJ_SUPER_NOVICE) {
		// MAPID_NOVICE, MAPID_SUPER_NOVICE, MAPID_NOVICE_HIGH, MAPID_BABY
		Require_Level(.Req_First[0], .Req_First[1]);
		switch(Class) {
			case Job_Novice:
				// First job change
				Job_Options(.@job_opt,Job_Swordman,
					Job_Mage, Job_Archer, Job_Acolyte, Job_Merchant, Job_Thief,
					Job_Super_Novice, Job_Taekwon, Job_Gunslinger, Job_Ninja);
				if( .BabyNovice )
					Job_Options(.@job_opt, Job_Baby);
				break;
			case Job_Novice_High:
				// Job change after rebirth
				if( .LastJob && lastJob )
					Job_Options(.@job_opt,
						roclass((eaclass(lastJob)&EAJ_BASEMASK)|EAJL_UPPER));
				else
					Job_Options(.@job_opt, 
						Job_Swordman_High, Job_Mage_High, Job_Archer_High,
						Job_Acolyte_High, Job_Merchant_High, Job_Thief_High);
				break;
			case Job_Baby:
				if( !.BabyClass )
					break;
				// First job change as a baby
				Job_Options(.@job_opt, Job_Baby_Swordman, Job_Baby_Mage,
					Job_Baby_Archer,Job_Baby_Acolyte, Job_Baby_Merchant,
					Job_Baby_Thief);
				if( .BabyExpanded )
					Job_Options(.@job_opt, Job_Super_Baby, Job_Baby_Taekwon,
						Job_Baby_Gunslinger, Job_Baby_Ninja);
				if( .BabySummoner )
					Job_Options(.@job_opt, Job_Baby_Summoner);
				break;
			default:
				mes "An error has occurred.";
				close;
		}
	} else if( Is_First_Cls(.@eac) || 				// First Class
			   Is_First_Cls(.@eac&(~EAJL_UPPER)) ||	// Trans. First Cls
			   (.BabyClass && Is_First_Cls(.@eac&(~EAJL_BABY))) ) {	// Baby First Cls
		// Player is First Class (not Novice)
		// most jobs should have two options here  (2-1 and 2-2)
		.@class1 = roclass(.@eac|EAJL_2_1); // 2-1
		.@class2 = roclass(.@eac|EAJL_2_2); // 2-2
		// dispbottom "Debug: Classes: class1 ("+.@class1+"), class2 ("+.@class2+")";
		if(.LastJob && lastJob && (.@eac&EAJL_UPPER)) {
			// Player is rebirth Cls and linear class changes are enforced
			Require_Level(.Req_Second[0], .Req_Second[1]);
			Job_Options(.@job_opt, lastJob + Job_Novice_High);
		} else {
			// Class is not enforced, player can decide.
			if( .@class1 > 0 ) { // 2-1
				Require_Level(.Req_Second[0], .Req_Second[1]);
				Job_Options(.@job_opt, .@class1);
			}
			if( .@class2 > 0 ) { // 2-2
				Require_Level(.Req_Second[0], .Req_Second[1]);
				Job_Options(.@job_opt, .@class2);
			}
		}
	}
	
	// Displaying the Job Menu defined by .@job_opt.
	// .@job_opt should not be changed below this line.
	function Job_Menu;
	Job_Menu(.@job_opt);
	close;

// Displays the job menu
function	Job_Menu	{
	// getarg(0) is the .@job_opt array holding all available job changes.
	function Confirm_Change;
	while(true) {
		.@opt_cnt =  getarraysize(getarg(0));
		if( .@opt_cnt <= 0 ) {
			mes "No more jobs are available.";
			close;
		}

		.@selected = 0; // Just a single job class given, no select needed
		if (.@opt_cnt > 1) {
			// Multiple job classes given. Select one and save it to .@class
			// After that confirm .@class
			mes "Select a job.";
			.@menu$ = "";
			for (.@i = 0; .@i < .@opt_cnt; .@i++) {
				if( getelementofarray(getarg(0), .@i) == Job_Novice_High)
					.@jobname$ = "^0055FFRebirth^000000";
				else
					.@jobname$ = jobname(getelementofarray(getarg(0), .@i));
				.@menu$ = .@menu$ + " ~ " + .@jobname$ + ":";
			}
			.@menu$ = .@menu$+" ~ ^777777Cancel^000000";
			.@selected = select(.@menu$) - 1;
			if( .@selected < 0 || .@selected >= .@opt_cnt )
				close;
			next;
			mes .NPCName$;
		}
		.@class = getelementofarray(getarg(0), .@selected);
		if ((.@class == Job_Super_Novice || .@class == Job_Super_Baby) &&
				BaseLevel < .SNovice) {
			// Special Level Requirement because Super Novice and
			// Super Baby can both be selected in one of the first class
			// changes. That's why the Level Requirement is after and not before
			// the selection.
			mes "A base level of " + .SNovice +
				" is required to turn into a " + jobname(.@class) + ".";
			return;
		}
		// Confirm the Class
		Confirm_Change(.@class, .@opt_cnt > 1);
		next;
		mes .NPCName$;
	}
	return;
}


// Executes the actual jobchange and closes.
function	Job_Change	{
	.@previous_class = Class;
	.@to_cls = getarg(0);
	next;
	mes .NPCName$;
	mes "You are now " + callfunc("F_InsertArticle", jobname(.@to_cls)) + "!";
	if (.@to_cls == Job_Novice_High && .LastJob)
		lastJob = Class; // Saves the lastJob for rebirth
	jobchange .@to_cls;
	if (.@to_cls == Job_Novice_High)
		resetlvl(1);
	else if (.@to_cls == Job_Baby) {
		resetstatus;
		resetskill;
		set SkillPoint,0;
	}
	specialeffect2 EF_ANGEL2;
	specialeffect2 EF_ELECTRIC;
	if (.@previous_class != Class) {
		if (.Platinum)
			callfunc "F_GetPlatinumSkills";
		if (.GetJobEquip)
			Get_Job_Equip();
	}
	close; // Always closes after the change
}

function	Confirm_Change	{
	// Player confirms he want to change into .@class
	.@class = getarg(0, -1);
	.@back = getarg(1, false);
	if( .@class < 0 || eaclass(.@class) == -1 ) {
		mes "Unknown Class Error.";
		close;
	}
	mes "Do you want to change into ^0055FF"+jobname(.@class)+"^000000 class?";
	.@job_option$ = " ~ Change into ^0055FF"+jobname(.@class)+"^000000 class";
	if( .@class == Job_Novice_High)
		.@job_option$ = " ~ ^0055FFRebirth^000000";
	
	if (select(.@job_option$+": ~ ^777777" + 
			((.@back) ?"Go back" : "Cancel") + "^000000") == 1) {
		Job_Change(.@class);
	}
	if (!.@back)
		close; // "Cancel" pressed
	return;
}

// Function which gives a job related item to the player
// the items are the rewards from the original job change quests
function	Get_Job_Equip	{
	// Note: The item is dropping, when the player can't hold it.
	// But that's better than not giving the item at all.
	.@eac = eaclass();
	if( .@eac&EAJL_FOURTH ) {
		// Fourth Class Items
		getitem 490087,1; // Hourglass Necklace
	} else if( .@eac&EAJL_THIRD ) {
		// Third Class Items
		getitem 2795,1;	//	Green Apple Ring for every 3rd Class
		switch(BaseJob) {
			// BaseJob of Third Cls
			// For Normal Third, Baby Third and Transcended Third Cls
			case Job_Knight:
				getitem 5746,1;	break;	//	Rune Circlet [1]
			case Job_Wizard:
				getitem 5753,1;	break;	//	Magic Stone Hat [1]
			case Job_Hunter:
				getitem 5748,1;	break;	//	Sniper Goggle [1]
			case Job_Priest:
				getitem 5747,1;	break;	//	Mitra [1]
			case Job_Blacksmith:
				getitem 5749,1;	break;	//	Driver Band [1]
			case Job_Assassin:
				getitem 5755,1;	break;	//	Silent Executor [1]
			case Job_Crusader:
				getitem 5757,1;	break;	//	Dip Schmidt Helm [1]
			case Job_Sage:
				getitem 5756,1;	break;	//	Wind Whisper [1]
			case Job_Bard:
				getitem 5751,1;	break;	//	Maestro Song's Hat [1]
			case Job_Dancer:
				getitem 5758,1;	break;	//	Dying Swan [1]
			case Job_Monk:
				getitem 5754,1;	break;	//	Blazing Soul [1]
			case Job_Alchemist:
				getitem 5752,1;	break;	//	Midas Whisper[1]
			case Job_Rogue:
				getitem 5750,1; 		//	Shadow Handicraft [1]
				getitem 6121,1;			//	Makeover Brush
				getitem 6122,1;	break;	//	Paint Brush
		}
	} else if (.@eac&EAJL_2) {
		// Second Class (And not Third Class)
		switch(BaseJob) {
			// Second Class
			case Job_Knight:
				getitem 1163,1;	break;	//	Claymore [0]
			case Job_Priest:
				getitem 1522,1;	break;	//	Stunner [0]
			case Job_Wizard:
				getitem 1617,1;	break;	//	Survivor's Rod [0]
			case Job_Blacksmith:
				getitem 1360,1;	break;	//	Two-Handed-Axe [1]
			case Job_Hunter:
				getitem 1718,1;	break;	//	Hunter Bow [0]
			case Job_Assassin:
				getitem 1254,1;	break;	//	Jamadhar [0]
			case Job_Crusader:
				getitem 1410,1;	break;	//	Lance [0]
			case Job_Monk:
				getitem 1807,1;	break;	//	Fist [0]
			case Job_Sage:
				getitem 1550,1;	break;	//	Book [3]
			case Job_Rogue:
				getitem 1222,1;	break;	//	Damascus [1]
			case Job_Alchemist:
				getitem 1126,1;	break;	//	Saber [2]
			case Job_Bard:
				getitem 1907,1;	break;	//	Guitar [0]
			case Job_Dancer:
				getitem 1960,1;	break;	//	Whip [1]
			case Job_Super_Novice:
				getitem 1208,1;	break;	//	Main Gauche [4]
			case Job_Star_Gladiator:
				getitem 1550,1;	break;	//	Book [3]
			case Job_Soul_Linker:
				getitem 1617,1;	break;	//	Survivor's Rod [0]
		}
	} else {
		// Neither Second or Third Cls
		// => First Cls or not covered by the switch
		switch(BaseClass) {
			// First Class
			case Job_Swordman:
				getitem 1108,1;	break;	//	Blade [4]
			case Job_Mage:
				getitem 1602,1;	break;	//	Rod [4]
			case Job_Archer:
				getitem 1705,1;	break;	//	Composite Bow [4]
			case Job_Acolyte:
				getitem 1505,1;	break;	//	Mace [4]
			case Job_Merchant:
				getitem 1302,1;	break;	//	Axe [4]
			case Job_Thief:
				getitem 1208,1;	break;	//	Main Gauche [4]
			case Job_Gunslinger:
				getitem 13101,1; break;	//	Six Shooter [2]
			case Job_Ninja:
				getitem 13010,1; break;	//	Asura [2]
		}
	}
	return;
}

OnInit:
	// Initialisation, do not edit these
	.NPCName$ = "[Job Master]";
	
	// Settings
	.FourthClass = true;				// Enable fourth classes?
	.ThirdClass = true;					// Enable third classes?
	.RebirthClass = true;				// Enable rebirth classes?
	.SecondExpanded = true;				// Enable new expanded second classes: Ex. Super Novice, Kagerou/Oboro, Rebellion?
	.BabyNovice = true;					// Enable Baby novice classes? Disable it if you like player must have parent to get job baby.
	.BabyClass = true;					// Enable Baby classes?
	.BabyThird = true;					// Enable Baby third classes?
	.BabyExpanded = true;				// Enable Baby Expanded classes: Ex. Baby Ninja, Baby Taekwon, etc.
	.BabySummoner = true;				// Enable Baby Summoner?
	.LastJob = true;					// Enforce linear class changes?
	.SkillPointCheck = true;			// Force player to use up all skill points?
	.Platinum = true;					// Get platinum skills automatically?
	.GetJobEquip = false;				// Get job equipment (mostly weapons) on job change?

	// Level Requirements
	setarray .Req_First[0],1,10; 		// Minimum base level, job level to turn into 1st class
	setarray .Req_Second[0],1,40; 		// Minimum base level, job level to turn into 2nd class
	setarray .Req_Rebirth[0],99,50;		// Minimum base level, job level to rebirth
	setarray .Req_Third[0],99,50;		// Minimum base level, job level to change to third class
	setarray .Req_Fourth[0],200,70;		// Minimum base level, job level to change to fourth class
	setarray .Req_Exp_NJ_GS[0],99,70; 	// Minimum base level, job level to turn into Expanded Ninja and Gunslinger
	setarray .Req_Exp_SNOVI[0],99,99; 	// Minimum base level, job level to turn into Expanded Super Novice
	.SNovice = 45;						// Minimum base level to turn into Super Novice
	
	// Setting adjustments by PACKETVER
	if( PACKETVER < 20161207 ) {
		if( .BabyExpanded )
			debugmes "jobmaster: BabyExpanded is disabled due to outdated PACKETVER.";
		if( .BabySummoner )
			debugmes "jobmaster: BabySummoner is disabled due to outdated PACKETVER.";
		.BabyExpanded = false;
		.BabySummoner = false;
	}
	end;
}



// Falcon Master :: breeder
//============================================================
moc_para01,24,22,5	script	Falcon Breeder#hnt	105,{
	if(Upper==0) set .@price,2500; //Normal Falcon - default price
	if(Upper==1) set .@price,2500; //Scarf Falcon
	if(Upper==2) set .@price,2500; //Baby Falcon

	mes "[Falcon Breeder]";
	if (BaseJob == Job_Hunter) {
		if (checkwug()) {
			mes "Um...";
			mes "You can't rent a Falcon";
			mes "until you dismiss your warg first!";
			close;
		}
		mes "Do you need a Falcon?";
		mes "You can rent your own";
		mes "trusty bird of prey for a";
		mes "fee of just "+.@price+" zeny~";
		next;
		switch(select("Rent Falcon:Cancel")) {
		case 1:
			if (checkwug()) {
				mes "[Falcon Breeder]";
				mes "Um...";
				mes "You can't rent a Falcon";
				mes "until you dismiss your warg first!";
				close;
			}
			if (Zeny < .@price) {
				mes "[Falcon Breeder]";
				mes "What is this?";
				mes "You don't have";
				mes "enough zeny?!";
				mes "You better start";
				mes "hunting money";
				mes "instead of monsters~";
				close;
			}
			else if(getskilllv("HT_FALCON") == 0) {
				mes "[Falcon Breeder]";
				mes "Gosh~";
				mes "Go learn how to";
				mes "manage a Falcon";
				mes "first! I can't rent one";
				mes "to you if you can't";
				mes "handle it, you know.";
				close;
			}
			else if(checkfalcon()) {
				mes "[Falcon Breeder]";
				mes "Um...";
				mes "You already have";
				mes "a Falcon. It's right";
				mes "there, can't you see it?";
				close;
			}
			set Zeny, Zeny-.@price;
			setfalcon;
			close;
		case 2:
			mes "[Falcon Breeder]";
			mes "W-wait, where're";
			mes "you goin'? These";
			mes "Falcons are top notch,";
			mes "I guarantee it! C'mon, yo~";
			close;
		}
	} else {
		mes "Young fool!";
		mes "Falcons can only";
		mes "be used by Hunters";
		mes "and Snipers, capish?";
		mes "...Heh heh, jealous?";
		close;
	}
}

//
//
//      Super Teleport
//
//
//


-	script	Warper	-1,{
function Go; function Disp; function Pick; function Restrict;

// --------------------------------------------------
//	Main Menu:
// --------------------------------------------------

menu	"Last Warp ^777777["+lastwarp$+"]^000000",-,
    	" ~ Towns",Towns,
    	" ~ Fields",Fields,
    	" ~ Dungeons",Dungeons,
    	" ~ Guild Castles",Castles,
    	" ~ Guild Dungeons",Guild_Dungeons,
    	" ~ Instances",Instances,
    	" ~ Special Areas",Special;

	if (lastwarp$ == "")
		message strcharinfo(0),"You haven't warped anywhere yet.";
	else
		warp lastwarp$,lastwarpx,lastwarpy;
	end;

// ------------------- Functions -------------------
// * Go("<map>",<x>,<y>);
//	~ Warps directly to a map.
//
// * Disp("<Menu Option>",<first option>,<last option>);
// * Pick("<map_prefix>"{,<index offset>});
//	~ Dynamic menu and map selection (auto-numbered).
//	~ Fields and Dungeons must use Disp and Pick Functions.
//
// * Disp("<Option 1>:<Option 2>:<etc.>");
// * Pick("","<map1>","<map2>","<etc.>");
//	~ Manual menu and map selection (listed).
//
// * Restrict("<RE | Pre-RE>"{,<menu option numbers>});
//	~ Only allows map for Renewal or Pre-Renewal modes.
//     If menu option numbers are given, only those maps
//     will be restricted (i.e. not for "Go").
//
// Other notes:
//   ~ Array @c[] holds all (x,y) coordinates.
//   ~ Use @c[2] EXCEPT when maps begin dynamically
//	  at 0: use @c[0] and Pick() offset 1.
// --------------------------------------------------

function Go {
	set lastwarp$, getarg(0);
	set lastwarpx, getarg(1,0);
	set lastwarpy, getarg(2,0);
	warp getarg(0),getarg(1,0),getarg(2,0);
	end;
}
function Disp {
	if (getargcount() < 3)
		set @menu$, getarg(0);
	else {
		set @menu$,"";
		for (set .@i,getarg(1); .@i<=getarg(2); set .@i,.@i+1)
			set @menu$, @menu$+getarg(0)+" "+.@i+":";
	}
	return;
}
function Pick {
	set .@warp_block,@warp_block;
	set @warp_block,0;
	if((@f && .OnlyFirstFld) || (@d && .OnlyFirstDun)){
		set .@select,1;
		if(.@warp_block){
			while(.@warp_block & (1<<.@select)){
				.@select += 1;
			}
		}
	}else{
		set .@select, select(@menu$);
	}
	if (getarg(0) == "") {
		set .@i, .@select;
		set .@map$, getarg(.@i);
	} else {
		set .@i, .@select-getarg(1,0);
		set .@map$, getarg(0)+((.@i<10)?"0":"")+.@i;
	}
	if (.@warp_block & (1<<.@select)) {
		message strcharinfo(0),"This map is not enabled in "+((checkre(0))?"":"Pre-")+"Renewal.";
		end;
	}
	set .@x, @c[.@i*2];
	set .@y, @c[.@i*2+1];
	deletearray @c[0],getarraysize(@c);
	@f = false; @d = false;
	Go(.@map$,.@x,.@y);
}
function Restrict {
	if ((getarg(0) == "RE" && !checkre(0)) || (getarg(0) == "Pre-RE" && checkre(0))) {
		if (getarg(1,0)) {
			set @warp_block,0;
			for (set .@i,1; .@i<getargcount(); set .@i,.@i+1)
				set @warp_block, @warp_block | (1<<getarg(.@i));
		} else {
			message strcharinfo(0),"This map is not enabled in "+((checkre(0))?"":"Pre-")+"Renewal.";
			end;
		}
	}
	return;
}

// --------------------------------------------------
	Towns:
// --------------------------------------------------
menu	"Prontera",T1, "Alberta",T2, "Aldebaran",T3, "Amatsu",T4, "Ayothaya",T5,
    	"Brasilis",T6, "Comodo",T7, "Dewata",T8, "Eclage",T9, "Einbech",T10,
		"Einbroch",T11, "El Dicastes",T12, "Geffen",T13, "Hugel",T14, "Ice Castle",T15,
		"Izlude",T16, "Jawaii",T17, "Juno",T18, "Kunlun",T19, "Lasagna",T20,
		"Lighthalzen",T21, "Luoyang",T22, "Lutie",T23, "Malangdo",T24, "Malaya",T25,
		"Manuk",T26, "Midgarts Expedition Camp",T27, "Mora",T28, "Morocc",T29, "Moscovia",T30,
		"Nameless Island (Day)",T31, "Nameless Island (Night)",T32, "Niflheim",T33, "Payon",T34, "Rachel",T35,
		"Rockridge",T36, "Special Security Area, Cor",T37, "Splendide",T38, "Thor Camp",T39, "Umbala",T40,
		"Varmundt's Mansion",T41, "Veins",T42, "Verus Findspot",T43, "Wolf Village",T44;

T1: Go("prontera",155,183);
T2: Go("alberta",28,234);
T3: Go("aldebaran",140,131);
T4: Go("amatsu",198,84);
T5: Go("ayothaya",208,166);
T6: Restrict("RE");
	Go("brasilis",196,217);
T7: Go("comodo",209,143);
T8: Restrict("RE");
	Go("dewata",200,180);
T9: Restrict("RE");
	Go("ecl_in01",48,53);
T10: Go("einbech",63,35);
T11: Go("einbroch",64,200);
T12: Restrict("RE");
	 Go("dicastes01",198,187);
T13: Go("geffen",119,59);
T14: Go("hugel",96,145);
T15: Restrict("RE");
	 Go("icecastle",185,212);
T16: Go("izlude",128,(checkre(3)?146:114));
T17: Go("jawaii",251,132);
T18: Go("yuno",157,51);
T19: Go("gonryun",160,120);
T20: Restrict("RE");
	 Go("lasagna",193,182);
T21: Go("lighthalzen",158,92);
T22: Go("louyang",217,100);
T23: Go("xmas",147,134);
T24: Restrict("RE");
	 Go("malangdo",140,114);
T25: Restrict("RE");
	 Go("malaya",231,200);
T26: Go("manuk",282,138);
T27: Go("mid_camp",210,288);
T28: Restrict("RE");
	 Go("mora",55,146);
T29: Go("morocc",156,93);
T30: Go("moscovia",223,184);
T31: Go("nameless_i",256,215);
T32: Go("nameless_n",256,215);
T33: Go("niflheim",202,174);
T34: Go("payon",179,100);
T35: Go("rachel",130,110);
T36: Restrict("RE");
	 Go("harboro1",298,206);
T37: Restrict("RE");
	 Go("sp_cor",160,166);
T38: Go("splendide",201,147);
T39: Go("thor_camp",246,68);
T40: Go("umbala",97,153);
T41: Restrict("RE");
	Go("ba_maison",72,146);
T42: Go("veins",216,123);
T43: Restrict("RE");
	 Go("verus04",123,250);
T44: Restrict("RE");
	 Go("wolfvill",144,144);

// --------------------------------------------------
	Fields:
// --------------------------------------------------
@f = true;
menu	"Amatsu Fields",F1, "Ayothaya Fields",F2, "Bifrost Fields", F3,
    	"Brasilis Fields",F4, "Comodo Fields",F5, "Dewata Fields",F6,
    	"Eclage Fields",F7, "Einbroch Fields",F8, "El Dicastes Fields",F9,
    	"Frozen Scale Fields",F10, "Geffen Fields",F11, "Grey Wolf Forest",F12,
		"Hugel Fields",F13, "Juno Fields",F14, "Kiwawa Desert",F15,
		"Kunlun Fields",F16, "Lasagna Fields",F17, "Lighthalzen Fields",F18,
		"Luoyang Field",F19, "Lutie Field",F20, "Malaya Fields",F21,
		"Manuk Fields",F22, "Mjolnir Fields",F23, "Moscovia Fields",F24,
		"Niflheim Fields",F25, "Payon Forests",F26, "Prontera Fields",F27,
		"Rachel Fields",F28, "Sograt Deserts",F29, "Splendide Fields",F30,
		"Umbala Fields",F31, "Veins Fields",F32;

F1: setarray @c[2],190,197;
	Disp("Amatsu Field",1,1); Pick("ama_fild");
F2: setarray @c[2],173,134,212,150;
	Disp("Ayothaya Field",1,2); Pick("ayo_fild");
F3: Restrict("RE");
	setarray @c[2],193,220,220,187;
	Disp("Bifrost Field",1,2); Pick("bif_fild");
F4: Restrict("RE");
	setarray @c[2],74,32;
	Disp("Brasilis Field",1,1); Pick("bra_fild");
F5: Restrict("Pre-RE",5);
	setarray @c[2],180,178,231,160,191,172,228,194,224,203,190,223,234,177,194,175,172,172;
	Disp("Comodo Field",1,9); Pick("cmd_fild");
F6: Restrict("RE");
	setarray @c[2],371,212;
	Disp("Dewata Field",1,1); Pick("dew_fild");
F7: Restrict("RE");
	setarray @c[2],97,314;
	Disp("Eclage Field",1,1); Pick("ecl_fild");
F8: Restrict("Pre-RE",2,10);
	setarray @c[2],142,225,182,141,187,228,185,173,216,173,195,148,272,220,173,214,207,174,196,200;
	Disp("Einbroch Field",1,10); Pick("ein_fild");
F9: Restrict("RE");
	setarray @c[2],143,132,143,217;
	Disp("El Dicastes Field",1,2); Pick("dic_fild");
F10: Restrict("RE");
	 setarray @c[2],378,223,223,18,365,241,140,280;
	 Disp("Frozen Scale Hill:Frozen Scale Plains:Frozen Scale Glacier:Frozen Tail"); Pick("","jor_back1","jor_back2","jor_back3","jor_tail");
F11: Restrict("Pre-RE",13,15);
	 setarray @c[0],46,199,213,204,195,212,257,192,188,171,166,263,248,158,195,191,186,183,221,117,178,218,136,328,240,181,235,235,211,185;
	 Disp("Geffen Field",0,14); Pick("gef_fild",1);
F12: Restrict("RE");
	 setarray @c[2],22,315,122,388;
	 Disp("Grey Wolf Forest",1,2); Pick("gw_fild");
F13: Restrict("Pre-RE",3,7);
	 setarray @c[2],268,101,222,193,232,185,252,189,196,106,216,220,227,197;
	 Disp("Hugel Field",1,7); Pick("hu_fild");
F14: Restrict("Pre-RE",5,10);
	 setarray @c[2],189,224,192,207,221,157,226,199,223,177,187,232,231,174,196,203,183,214,200,124,195,226,210,304;
	 Disp("Juno Field",1,12); Pick("yuno_fild");
F15: Restrict("RE");
	 setarray @c[2],38,246,31,207;
	 Disp("Kiwawa Desert",1,2); Pick("","rockrdg1","rockrdg2");
F16: setarray @c[2],220,227;
	 Disp("Kunlun Field",1,1); Pick("gon_fild");
F17: Restrict("RE");
	 setarray @c[2],344,371,20,98;
	 Disp("Lasagna Field",1,2); Pick("lasa_fild");	 
F18: setarray @c[2],240,179,185,235,240,226;
	 Disp("Lighthalzen Field",1,3); Pick("lhz_fild");
F19: setarray @c[2],229,187;
	 Disp("Luoyang Field",1,1); Pick("lou_fild");
F20: setarray @c[2],115,145;
	 Disp("Lutie Field",1,1); Pick("xmas_fild");
F21: Restrict("RE");
	 setarray @c[2],40,272,207,180;
	 Disp("Malaya Field",1,2); Pick("ma_fild");
F22: setarray @c[2],35,236,35,262,84,365;
	 Disp("Manuk Field",1,3); Pick("man_fild");
F23: setarray @c[2],204,120,175,193,208,213,179,180,181,240,195,270,235,202,188,215,205,144,245,223,180,206,196,208;
	 Disp("Mjolnir Field",1,12); Pick("mjolnir_");
F24: setarray @c[2],82,104,131,147;
	 Disp("Moscovia Field",1,2); Pick("mosk_fild");
F25: setarray @c[2],215,229,167,234;
	 Disp("Niflheim Field",1,2); Pick("nif_fild");
F26: Restrict("Pre-RE",5,11);
	 setarray @c[2],158,206,151,219,205,148,186,247,134,204,193,235,200,177,137,189,201,224,160,205,194,150;
	 Disp("Payon Forest",1,11); Pick("pay_fild");
F27: setarray @c[0],208,227,190,206,240,206,190,143,307,252,239,213,185,188,193,194,187,218,210,183,195,149,198,164;
	 Disp("Prontera Field",0,11); Pick("prt_fild",1);
F28: Restrict("Pre-RE",2,7,9,10,11,13);
	 setarray @c[2],192,162,235,166,202,206,202,208,225,202,202,214,263,196,217,201,87,121,277,181,221,185,175,200,174,197;
	 Disp("Rachel Field",1,13); Pick("ra_fild");
F29: if(.Satan_Morocc){
	 setarray @c[2],219,205,177,206,194,182,224,170,198,216,156,187,185,263,206,228,208,238,209,223,85,97,207,202,31,195,38,195;
	 Disp("Sograt Desert 1:Sograt Desert 2:Sograt Desert 3:Sograt Desert 7:Sograt Desert 11:Sograt Desert 12:Sograt Desert 13:Sograt Desert 16:Sograt Desert 17:Sograt Desert 18:Sograt Desert 19:Sograt Desert 20:Sograt Desert 21:Sograt Desert 22");
	 Pick("","moc_fild01","moc_fild02","moc_fild03","moc_fild07","moc_fild11","moc_fild12","moc_fild13","moc_fild16","moc_fild17","moc_fild18","moc_fild19","moc_fild20","moc_fild21","moc_fild22");
	 }else{
	 setarray @c[2],219,205,177,206,194,182,146,297,204,197,275,302,224,170,139,123,101,110,341,39,198,216,156,187,185,263,223,222,170,257,206,228,208,238,209,223,85,97;
	 Disp("Sograt Desert",1,19); Pick("moc_fild");
	 }
F30: setarray @c[2],175,186,236,184,188,204;
	 Disp("Splendide Field",1,3); Pick("spl_fild");
F31: setarray @c[2],217,206,223,221,237,215,202,197;
	 Disp("Umbala Field",1,4); Pick("um_fild");
F32: Restrict("Pre-RE",5);
	 setarray @c[2],186,175,196,370,222,45,51,250,202,324,150,223,149,307;
	 Disp("Veins Field",1,7); Pick("ve_fild");

// --------------------------------------------------
	Dungeons:
// --------------------------------------------------
@d = true;
menu	"Abandoned Lab Amicitia",D1, "Abyss Lakes",D2, "Amatsu Dungeon",D3,
		"Anthell",D4, "Ayothaya Dungeon",D5, "Beach Dungeon",D6,
		"Bifrost Tower",D7, "Bio Labs",D8, "Brasilis Dungeon",D9,
		"Byalan Dungeon",D10, "Clock Tower",D11, "Coal Mines",D12,
		"Culvert",D13, "Cursed Abbey",D14, "Dewata Dungeon",D15,
		"Einbroch Dungeon",D16, "Flame Basin",D17, "Gefenia",D18,
		"Geffen Dungeon",D19, "Glast Heim",D20, "Hidden Dungeon",D21,
		"Ice Dungeon",D22, "Illusion Dungeon",D23, "Issgard Dungeon",D24,
		"Juperos",D25, "Kiel Dungeon",D26, "Kunlun Dungeon",D27,
		"Lasagna Dungeon",D28, "Luoyang Dungeon",D29, "Magma Dungeon",D30,
		"Malangdo Dungeon",D31, "Moscovia Dungeon",D32, "Nidhogg's Dungeon",D33,
		"Niflheim Dungeon",D34, "Odin Temple",D35, "Orc Dungeon",D36,
		"Oz Labyrinth Dungeon",D37, "Payon Dungeon",D38, "Prontera Underground",D39,
		"Pyramids",D40, "Rachel Sanctuary",D41, "Rock Ridge Dungeon",D42,
		"Rudus Dungeon",D43, "Scaraba Hole",D44, "Sphinx",D45,
		"Sunken Ship",D46, "Thanatos Tower",D47, "Thor Volcano",D48,
		"Toy Factory",D49, "Turtle Dungeon",D50, "Umbala Dungeon",D51,
		"Varmundt's Dungeon",D52, "Verus Area",D53;

D1: Restrict("RE");
	setarray @c[2],253,244,145,278;
	Disp("1st Floor - Comprehensive Lab:2nd Floor - Intensive Culture Room"); Pick("","amicitia1","amicitia2");
D2: Restrict("RE",4);
	setarray @c[2],261,272,275,270,116,27,169,159;
	Disp("Abyss Lakes",1,4); Pick("abyss_");
D3: setarray @c[2],228,11,34,41,119,14;
	Disp("Amatsu Dungeon",1,3); Pick("ama_dun");
D4: setarray @c[2],35,262,168,170;
	Disp("Anthell",1,2); Pick("anthell");
D5: setarray @c[2],275,19,24,26;
	Disp("Ancient Shrine Maze:Inside Ancient Shrine"); Pick("ayo_dun");
D6: setarray @c[2],266,67,255,244,23,260;
	Disp("Beach Dungeon",1,3); Pick("","beach_dun","beach_dun2","beach_dun3");
D7: Restrict("RE");
	setarray @c[2],57,13,64,88,45,14,26,23;
	Disp("Bifrost Tower",1,4); Pick("ecl_tdun");
D8: Restrict("RE",4,5);
	setarray @c[2],150,288,150,18,140,134,244,52,100,202;
	Disp("Bio Lab 1:Bio Lab 2:Bio Lab 3:Bio Lab 4:Tomb of the Fallen"); Pick("","lhz_dun01","lhz_dun02","lhz_dun03","lhz_dun04","lhz_dun_n");
D9: Restrict("RE");
	setarray @c[2],87,47,262,262;
	Disp("Brasilis Dungeon",1,2); Pick("bra_dun");
D10: Restrict("RE",6);
	 setarray @c[0],168,168,253,252,236,204,32,63,26,27,141,187;
	 Disp("Byalan Dungeon",1,6); Pick("iz_dun",1);
D11: Restrict("RE",9,10,11);
	 setarray @c[2],199,159,148,283,65,147,56,155,297,25,127,169,277,178,268,74,266,27,60,142,79,39;
	 Disp("Clock Tower 1:Clock Tower 2:Clock Tower 3:Clock Tower 4:Basement 1:Basement 2:Basement 3:Basement 4:Nightmare Clock Tower, 2nd Floor:Nightmare Clock Tower, 3rd Floor:Unknown Basement");
	 Pick("","c_tower1","c_tower2","c_tower3","c_tower4","alde_dun01","alde_dun02","alde_dun03","alde_dun04","c_tower2_","c_tower3_","clock_01");
D12: setarray @c[2],52,17,381,343,302,262;
	 Disp("Coal Mines",1,3); Pick("mjo_dun");
D13: setarray @c[2],131,247,19,19,180,169,100,92;
	 Disp("Culvert",1,4); Pick("","prt_sewb1","prt_sewb2","prt_sewb3","prt_sewb4");
D14: setarray @c[2],51,14,150,11,120,10;
	 Disp("Cursed Abbey",1,3); Pick("abbey");
D15: Restrict("RE");
	 setarray @c[2],285,160,299,29;
	 Disp("Dewata Dungeon",1,2); Pick("dew_dun");
D16: Restrict("RE",3);
	 setarray @c[2],22,14,292,290,269,279;
	 Disp("Einbroch Dungeon",1,3); Pick("ein_dun");
D17: Restrict("RE");
	 Go("moro_vol",97,107);
D18: setarray @c[2],40,103,203,34,266,168,130,272;
	 Disp("Gefenia",1,4); Pick("gefenia",0);
D19: setarray @c[0],104,99,115,236,106,132,203,200;
	 Disp("Geffen Dungeon",1,4); Pick("gef_dun",1);
D20: Restrict("RE",17,18,19);
	 setarray @c[2],370,304,199,29,104,25,150,15,157,287,147,15,258,255,108,291,171,283,68,277,156,7,12,7,133,271,224,274,14,70,150,14,104,31,148,144,199,29;
	 Disp("Entrance:Castle 1:Castle 2:Chivalry 1:Chivalry 2:Churchyard:Culvert 1:Culvert 2:Culvert 3:Culvert 4:St. Abbey:Staircase Dungeon:Underground Cave 1:Underground Cave 2:Underground Prison 1:Underground Prison 2:Castle 2 - Nightmare Mode:Churchyard - Nightmare Mode:Abyss Glastheim Castle F1");
	 Pick("","glast_01","gl_cas01","gl_cas02","gl_knt01","gl_knt02","gl_chyard","gl_sew01","gl_sew02","gl_sew03","gl_sew04","gl_church","gl_step","gl_dun01","gl_dun02","gl_prison","gl_prison1","gl_cas02_","gl_chyard_","gl_cas01_");
D21: setarray @c[2],99,31,93,20,182,88;
	 Disp("Hidden Dungeon",1,3); Pick("prt_maze");
D22: setarray @c[2],157,14,151,155,149,22,33,158;
	 Disp("Ice Dungeon",1,4); Pick("ice_dun");
D23: menu	"Illusion of Abyss",SubD1, "Illusion of Frozen",SubD2, "Illusion of Labyrinth",SubD3,
			"Illusion of Luanda",SubD4, "Illusion of Moonlight",SubD5, "Illusion of Teddy Bear",SubD6,
			"Illusion of Twins",SubD7, "Illusion of Underwater",SubD8, "Illusion of Vampire",SubD9;
	SubD1: Restrict("RE");
		   setarray @c[2],132,189,99,186;
		   Disp("Desolate Village:Bleak Turtle Palace"); Pick("","tur_d03_i","tur_d04_i");
	SubD2: Restrict("RE");
		   Go("ice_d03_i",149,22);
	SubD3: Restrict("RE");
		   Go("prt_mz03_i",100,100);
	SubD4: Restrict("RE");
		   Go("com_d02_i",250,245);
	SubD5: Restrict("RE");
		   Go("pay_d03_i",140,44);
	SubD6: Restrict("RE");
		   Go("ein_d02_i",164,184);
	SubD7: Restrict("RE");
		   Go("ant_d02_i",168,170);
	SubD8: Restrict("RE");
		   setarray @c[2],130,230,141,188;
		   Disp("Deep Sea Cave",1,2); Pick("","iz_d04_i","iz_d05_i");
	SubD9: Restrict("RE");
		   Go("gef_d01_i",114,216);
D24: Restrict("RE");
	 setarray @c[2],112,15,280,87,112,12,274,85;
	 Disp("Abandoned Pit Floor 1:Abandoned Pit Floor 2:Snake God's Warmth 1st Floor:Snake God's Warmth 2nd Floor"); Pick("","jor_ab01","jor_ab02","jor_dun01","jor_dun02");
D25: Restrict("RE",5);
	 setarray @c[2],140,51,53,247,37,63,150,285,146,215;
	 Disp("Entrance:Juperos 1:Juperos 2:Core:Eastern Ruins of Juperos");
	 Pick("","jupe_cave","juperos_01","juperos_02","jupe_core","ver_eju");
D26: setarray @c[2],28,226,41,198;
	 Disp("Kiel Dungeon",1,2); Pick("kh_dun");
D27: setarray @c[2],153,53,28,113,68,16;
	 Disp("Kunlun Dungeon",1,3); Pick("gon_dun");
D28: Restrict("RE");
	 setarray @c[2],24,143,22,171,190,18;
	 Disp("Lasagna Dungeon",1,3); Pick("lasa_dun");
D29: setarray @c[2],218,196,282,20,165,38;
	 Disp("The Royal Tomb:Inside the Royal Tomb:Suei Long Gon"); Pick("lou_dun");
D30: Restrict("RE",3);
	 setarray @c[2],126,68,47,30,118,113;
	 Disp("Magma Dungeon",1,3); Pick("mag_dun");
D31: Restrict("RE");
	 setarray @c[2],33,230;
	 Disp("Malangdo Dungeon",1,1); Pick("mal_dun");
D32: setarray @c[2],189,48,165,30,32,135;
	 Disp("Moscovia Dungeon",1,3); Pick("mosk_dun");
D33: setarray @c[2],61,239,60,271;
	 Disp("Nidhogg's Dungeon",1,2); Pick("nyd_dun");
D34: Restrict("RE");
	 setarray @c[2],145,90,150,20;
	 Disp("Niflheim Dungeon - 1st Floor:Niflheim Dungeon - 2nd Floor"); Pick("nif_dun");
D35: Restrict("RE",4);
	 setarray @c[2],298,167,224,149,266,280,276,236;
	 Disp("Odin Temple 1:Odin Temple 2:Odin Temple 3:Odin Past"); Pick("","odin_tem01","odin_tem02","odin_tem03","odin_past");
D36: setarray @c[2],32,170,21,185;
	 Disp("Orc Dungeon",1,2); Pick("orcsdun");
D37: Restrict("RE");
	 setarray @c[2],21,191,141,277;
	 Disp("Oz Labyrinth Floor 1:Oz Labyrinth Floor 2"); Pick("oz_dun");
D38: setarray @c[0],21,183,19,33,19,63,155,159,201,204;
	 Disp("Payon Dungeon",1,5); Pick("pay_dun",1);
D39: Restrict("RE");
	 setarray @c[2],159,289,155,353;
	 Disp("Prontera Underground Prison:Prontera Invasion"); Pick("","prt_prison","prt_q");
D40: Restrict("RE",7,8);
	 setarray @c[2],192,9,10,192,100,92,181,11,94,96,192,8,94,96,192,8;
	 Disp("Pyramids 1:Pyramids 2:Pyramids 3:Pyramids 4:Basement 1:Basement 2:Basement 1 - Nightmare Mode:Basement 2 - Nightmare Mode");
	 Pick("","moc_pryd01","moc_pryd02","moc_pryd03","moc_pryd04","moc_pryd05","moc_pryd06","moc_prydn1","moc_prydn2");
D41: setarray @c[2],140,11,32,21,8,149,204,218,150,9;
	 Disp("Rachel Sanctuary",1,5); Pick("ra_san");
D42: Restrict("RE");
	 setarray @c[2],247,19,281,104;
	 Disp("Rock Ridge Mine:Underground Waterway Culvert"); Pick("","rockmi1","harboro2");
D43: Restrict("RE");
	 setarray @c[2],200,377,185,258,366,207,378,178;
	 Disp("Rudus Dungeon",1,4); Pick("","sp_rudus","sp_rudus2","sp_rudus3","sp_rudus4");
D44: Restrict("RE");
	 setarray @c[2],364,44,101,141,101,141;
	 Disp("Scaraba Hole",1,3); Pick("dic_dun");
D45: setarray @c[2],288,9,149,81,210,54,10,222,100,99;
	 Disp("Sphinx",1,5); Pick("","in_sphinx1","in_sphinx2","in_sphinx3","in_sphinx4","in_sphinx5");
D46: setarray @c[2],69,24,102,27;
	 Disp("Sunken Ship",1,2); Pick("treasure");
D47: setarray @c[2],150,39,150,136,220,158,59,143,62,11,89,221,35,166,93,148,29,107,159,138,19,20,130,52;
	 Disp("Thanatos Tower",1,12); Pick("tha_t");
D48: setarray @c[2],21,228,75,205,34,272;
	 Disp("Thor Volcano",1,3); Pick("thor_v");
D49: setarray @c[2],205,15,129,133;
	 Disp("Toy Factory",1,2); Pick("xmas_dun");
D50: setarray @c[2],154,49,148,261,132,189,100,192;
	 Disp("Entrance:Turtle Dungeon 1:Turtle Dungeon 2:Turtle Dungeon 3"); Pick("tur_dun");
D51: Restrict("Pre-RE",1,2);
	 setarray @c[2],42,31,48,30,204,78;
	 Disp("Carpenter's Shop in the Tree:Passage to a Foreign World:Hvergermil's Fountain");
	 Pick("","um_dun01","um_dun02","yggdrasil01");
D52: Restrict("RE");
	 setarray @c[2],275,21,15,115,15,115,159,27,162,36,159,11,156,33,337,333,314,64,163,18,156,20,39,81;
	 Disp("Sewage Treatment Plant:1st Power Plant:2nd Power Plant:Large Bath Meditathio:Lost Farm Valley:Library Memory Corridor:Upper Floor of Tartaros Storage:Lower Floor of Tartaros Storage:Death Rune:Fire Rune:Grass Rune:Ice Rune"); Pick("","ba_pw02","ba_pw01","ba_pw03","ba_bath","ba_lost","ba_lib","ba_2whs01","ba_2whs02","bl_death","bl_lava","bl_grass","bl_ice");
D53: Restrict("RE");
	 setarray @c[2],244,61,72,20,122,22;
	 Disp("Lab-OPTATIO:R&D-WISH:Verus Center Square"); Pick("verus");

// --------------------------------------------------
	Castles:
// --------------------------------------------------
menu	"[FE] Aldebaran Castles",C1, "[FE] Geffen Castles",C2, "[FE] Payon Castles",C3,
    	"[FE] Prontera Castles",C4, "[SE] Arunafeltz Castles",C5, "[SE] Schwarzwald Castles",C6,
		"[TE] Aldebaran Castles",C7, "[TE] Prontera Castles",C8;

C1: setarray @c[2],48,83,95,249,142,85,239,242,264,90;
	Disp("Neuschwanstein:Hohenschwangau:Nuenberg:Wuerzburg:Rothenburg");
	Pick("","alde_gld","alde_gld","alde_gld","alde_gld","alde_gld");
C2: setarray @c[2],214,75,308,240,143,240,193,278,305,87;
	Disp("Repherion:Eeyolbriggar:Yesnelph:Bergel:Mersetzdeitz");
	Pick("","gef_fild13","gef_fild13","gef_fild13","gef_fild13","gef_fild13");
C3: setarray @c[2],121,233,295,116,317,293,140,160,204,266;
	Disp("Bright Arbor:Scarlet Palace:Holy Shadow:Sacred Altar:Bamboo Grove Hill");
	Pick("","pay_gld","pay_gld","pay_gld","pay_gld","pay_gld");
C4: setarray @c[2],134,65,240,128,153,137,111,240,208,240;
	Disp("Kriemhild:Swanhild:Fadhgridh:Skoegul:Gondul");
	Pick("","prt_gld","prt_gld","prt_gld","prt_gld","prt_gld");
C5: setarray @c[2],158,272,83,47,68,155,299,345,292,107;
	Disp("Mardol:Cyr:Horn:Gefn:Banadis");
	Pick("","aru_gld","aru_gld","aru_gld","aru_gld","aru_gld");
C6: setarray @c[2],293,100,288,252,97,196,137,90,71,315;
	Disp("Himinn:Andlangr:Viblainn:Hljod:Skidbladnir");
	Pick("","sch_gld","sch_gld","sch_gld","sch_gld","sch_gld");
C7: Restrict("RE");
	setarray @c[2],48,83,95,249,142,85,239,242,264,90;
	Disp("Kafragarten 1:Kafragarten 2:Kafragarten 3:Kafragarten 4:Kafragarten 5");
	Pick("","te_alde_gld","te_alde_gld","te_alde_gld","te_alde_gld","te_alde_gld");
C8: Restrict("RE");
	setarray @c[2],134,65,240,128,153,137,111,240,208,240;
	Disp("Gloria 1:Gloria 2:Gloria 3:Gloria 4:Gloria 5");
	Pick("","te_prt_gld","te_prt_gld","te_prt_gld","te_prt_gld","te_prt_gld");
	
// --------------------------------------------------
	Guild_Dungeons:
// --------------------------------------------------
menu	"Baldur",G1, "Luina",G2, "Valkyrie",G3, "Britoniah",G4,
    	"Arunafeltz",G5, "Schwarzwald",G6, "Kafragarten",G7,
		"Gloria",G8;

G1: Restrict("RE",2,3);
	setarray @c[2],119,93,119,93,120,130;
	Disp("Baldur F1:Baldur F2:Hall of Abyss");
	Pick("","gld_dun01","gld_dun01_2","gld2_pay");
G2: Restrict("RE",2,3);
	setarray @c[2],39,161,39,161,147,155;
	Disp("Luina F1:Luina F2:Hall of Abyss");
	Pick("","gld_dun02","gld_dun02_2","gld2_ald");
G3: Restrict("RE",2,3);
	setarray @c[2],50,44,50,44,140,132;
	Disp("Valkyrie F1:Valkyrie F2:Hall of Abyss");
	Pick("","gld_dun03","gld_dun03_2","gld2_prt");
G4: Restrict("RE",2,3);
	setarray @c[2],116,45,116,45,152,118;
	Disp("Britoniah F1:Britoniah F2:Hall of Abyss");
	Pick("","gld_dun04","gld_dun04_2","gld2_gef");
G5: Go("arug_dun01",199,195);
G6: Go("schg_dun01",200,124);
G7: Restrict("RE");
	Go("teg_dun01",42,36);
G8: Restrict("RE");
	Go("teg_dun02",26,160);

// --------------------------------------------------
	Instances:
// --------------------------------------------------
menu	"Bakonawa Lake",I1, "Bangungot Hospital 2F",I2, "Buwaya Cave",I3,
		"Devil Tower",I4, "Eclage Interior",I5, "Endless Tower",I6,
		"Faceworms Nest",I7, "Geffen Magic Tournament",I8, "Ghost Palace",I9,
		"Hazy Forest",I10, "Horror Toy Factory",I11, "Malangdo Culvert",I12,
		"Nidhoggur's Nest",I13, "Octopus Cave",I14, "Old Glast Heim",I15,
		"Orc's Memory",I16, "Sarah and Fenrir",I17, "Sara Memory",I18,
		"Sealed Shrine",I19, "Wolfchev's Laboratory",I20;

I1: Restrict("RE");
	Go("ma_scene01",172,175);
I2: Restrict("RE");
	Go("ma_dun01",151,8);
I3: Restrict("RE");
	Go("ma_fild02",316,317);
I4: Restrict("RE");
	Go("dali02",137,115);
I5: Restrict("RE");
	Go("ecl_hub01",129,12);
I6: Go("e_tower",72,112);
I7: Restrict("RE");
	Go("dali",85,64);
I8: Restrict("RE");
	Go("dali",94,141);
I9: Restrict("RE");
	Go("dali02",46,128);
I10: Restrict("RE");
	Go("bif_fild01",161,334);
I11: Restrict("RE");
	Go("xmas",234,298);
I12: Restrict("RE");
	Go("mal_in01",164,21);
I13: Go("nyd_dun02",95,193);
I14: Restrict("RE");
	Go("mal_dun01",152,230);
I15: Restrict("RE");
	Go("glast_01",204,268);
I16: Go("gef_fild10",240,198);
I17: Restrict("RE");
	Go("dali02",92,141);
I18: Restrict("RE");
	Go("dali",133,108);
I19: Go("monk_test",306,143);
I20: Restrict("RE");
	Go("lhz_dun04",148,269);

// --------------------------------------------------
	Special:
// --------------------------------------------------
menu	"Auction Hall",S1, "Battlegrounds",S2, "Casino",S3, "Dimensional Rift",S4,
		"Eden Group Headquarters",S5, "Kunlun Arena",S6, "Izlude Arena",S7, 
		"Monster Race Arena",S8, "Para Market",S9, "Turbo Track",S10;

S1: Go("auction_01",22,68);
S2: Go("bat_room",154,150);
S3: Go("cmd_in02",179,129);
S4: Restrict("RE");
	Go("dali",113,82);	
S5: Restrict("RE");
	Go("moc_para01",31,14);
S6: Go("gon_test",48,10);
S7: Go("arena_room",100,88);
S8: Go("p_track01",62,41);
S9: Restrict("RE");
	Go("paramk",97,17);
S10: Go("turbo_room",99,114);

OnNaviGenerate:

	// for non-prontera warpers, just give it warp to prontera
	// this cuts down the number of links considerably
	if (strnpcinfo(4) != "prontera") {
		naviregisterwarp("Warper > Prontera", "prontera", 155, 183);
		end;
	}

	naviregisterwarp("Warper > Prontera", "prontera", 155, 183);
	naviregisterwarp("Warper > Alberta", "alberta", 28, 234);
	naviregisterwarp("Warper > Al De Baran", "aldebaran", 140, 131);
	naviregisterwarp("Warper > Amatsu", "amatsu", 198, 84);
	naviregisterwarp("Warper > Ayothaya", "ayothaya", 208, 166);
	naviregisterwarp("Warper > Einbech", "einbech",63,35);
	naviregisterwarp("Warper > Einbroch", "einbroch",64,200);
	naviregisterwarp("Warper > Geffen", "geffen",119,59);
	naviregisterwarp("Warper > Hugel", "hugel",96,145);
	naviregisterwarp("Warper > Izlude", "izlude",128,(checkre(3)?146:114));
	naviregisterwarp("Warper > Jawaii", "jawaii",251,132);
	naviregisterwarp("Warper > Juno", "yuno",157,51);
	naviregisterwarp("Warper > Kunlun", "gonryun",160,120);
	naviregisterwarp("Warper > Lighthalzen", "lighthalzen",158,92);
	naviregisterwarp("Warper > Luoyang", "louyang",217,100);
	naviregisterwarp("Warper > Lutie", "xmas",147,134);
	naviregisterwarp("Warper > Manuk", "manuk",282,138);
	naviregisterwarp("Warper > Midgarts Expedition Camp", "mid_camp",210,288);
	naviregisterwarp("Warper > Morocc", "morocc",156,93);
	naviregisterwarp("Warper > Moscovia", "moscovia",223,184);
	naviregisterwarp("Warper > Nameless Island", "nameless_n",256,215);
	naviregisterwarp("Warper > Niflheim", "niflheim",202,174);
	naviregisterwarp("Warper > Payon", "payon",179,100);
	naviregisterwarp("Warper > Rachel", "rachel",130,110);
	naviregisterwarp("Warper > Splendide", "splendide",201,147);
	naviregisterwarp("Warper > Thor Camp", "thor_camp",246,68);
	naviregisterwarp("Warper > Umbala", "umbala",97,153);
	naviregisterwarp("Warper > Veins", "veins",216,123);

	if (checkre(0)) {
		naviregisterwarp("Warper > Brasilis", "brasilis", 196, 217);
		naviregisterwarp("Warper > Dewata", "dewata",200,180);
		naviregisterwarp("Warper > Eclage", "ecl_in01",48,53);
		naviregisterwarp("Warper > El Dicastes", "dicastes01",198,187);
		naviregisterwarp("Warper > Lasagna", "lasagna",193,182);
		naviregisterwarp("Warper > Malangdo", "malangdo",140,114);
		naviregisterwarp("Warper > Malaya", "malaya",231,200);
		naviregisterwarp("Warper > Mora", "mora",55,146);
	}

	// fields
	naviregisterwarp("Warper > Amatsu Field", "ama_fild01", 190, 197);
	naviregisterwarp("Warper > Ayothaya Field", "ayo_fild01", 173, 134);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Ayothaya Field", "ayo_fild02", 212, 150);
	}

	if (checkre(0)) {
		naviregisterwarp("Warper > Bifrost Field", "bif_fild01", 193, 220);
		if (!.OnlyFirstFld) {
			naviregisterwarp("Warper > Bifrost Field", "bif_fild02", 220, 187);
		}
		naviregisterwarp("Warper > Brasilis Field", "bra_fild01", 74, 32);
	}

	naviregisterwarp("Warper > Comodo Field", "cmd_fild01", 180, 178);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Comodo Field", "cmd_fild02", 231, 160);
		naviregisterwarp("Warper > Comodo Field", "cmd_fild03", 191, 172);
		naviregisterwarp("Warper > Comodo Field", "cmd_fild04", 228, 194);
		if (!checkre(0)) {
			naviregisterwarp("Warper > Comodo Field", "cmd_fild05", 224, 203);
		}
		naviregisterwarp("Warper > Comodo Field", "cmd_fild06", 190, 223);
		naviregisterwarp("Warper > Comodo Field", "cmd_fild07", 234, 177);
		naviregisterwarp("Warper > Comodo Field", "cmd_fild08", 194, 175);
		naviregisterwarp("Warper > Comodo Field", "cmd_fild09", 172, 172);
	}

	if (checkre(0)) {
		naviregisterwarp("Warper > Dewata Field", "dew_fild01", 371, 212);
		naviregisterwarp("Warper > Eclage Field", "ecl_fild01", 97, 314);
	}

	naviregisterwarp("Warper > Einbroch Field", "ein_fild01", 142, 225);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Einbroch Field", "ein_fild03", 187, 228);
		naviregisterwarp("Warper > Einbroch Field", "ein_fild04", 185, 173);
		naviregisterwarp("Warper > Einbroch Field", "ein_fild05", 216, 173);
		naviregisterwarp("Warper > Einbroch Field", "ein_fild06", 195, 148);
		naviregisterwarp("Warper > Einbroch Field", "ein_fild07", 272, 220);
		naviregisterwarp("Warper > Einbroch Field", "ein_fild08", 173, 214);
		naviregisterwarp("Warper > Einbroch Field", "ein_fild09", 207, 174);
		if (!checkre(0)) {
			naviregisterwarp("Warper > Einbroch Field", "ein_fild02", 182, 141);
			naviregisterwarp("Warper > Einbroch Field", "ein_fild10", 196, 200);
		}
	}

	if (checkre(0)) {
		naviregisterwarp("Warper > El Dicastes Field", "dic_fild01", 143, 132);
		if (!.OnlyFirstFld) {
			naviregisterwarp("Warper > El Dicastes Field", "dic_fild02", 143, 217);
		}
	}

	naviregisterwarp("Warper > Geffen Field 0", "gef_fild00", 46, 199);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Geffen Field 1", "gef_fild01", 213, 204);
		naviregisterwarp("Warper > Geffen Field 2", "gef_fild02", 195, 212);
		naviregisterwarp("Warper > Geffen Field 3", "gef_fild03", 257, 192);
		naviregisterwarp("Warper > Geffen Field 4", "gef_fild04", 188, 171);
		naviregisterwarp("Warper > Geffen Field 5", "gef_fild05", 166, 263);
		naviregisterwarp("Warper > Geffen Field 6", "gef_fild06", 248, 158);
		naviregisterwarp("Warper > Geffen Field 7", "gef_fild07", 195, 191);
		naviregisterwarp("Warper > Geffen Field 8", "gef_fild08", 186, 183);
		naviregisterwarp("Warper > Geffen Field 9", "gef_fild09", 221, 117);
		naviregisterwarp("Warper > Geffen Field 10", "gef_fild10", 178, 218);
		naviregisterwarp("Warper > Geffen Field 11", "gef_fild11", 136, 328);
		naviregisterwarp("Warper > Geffen Field 13", "gef_fild13", 235, 235);
		if (checkre(0)) {
			naviregisterwarp("Warper > Geffen Field 12", "gef_fild12", 240, 181);
			naviregisterwarp("Warper > Geffen Field 14", "gef_fild14", 211, 185);
		}
	}

	naviregisterwarp("Warper > Kunlun Field 1", "gon_fild01", 220, 227);

	naviregisterwarp("Warper > Hugel Field 1", "hu_fild01", 268, 101);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Hugel Field 2", "hu_fild02", 222, 193);
		naviregisterwarp("Warper > Hugel Field 4", "hu_fild04", 252, 189);
		naviregisterwarp("Warper > Hugel Field 5", "hu_fild05", 196, 106);
		naviregisterwarp("Warper > Hugel Field 6", "hu_fild06", 216, 220);
		if (!checkre(0)) {
			naviregisterwarp("Warper > Hugel Field 3", "hu_fild03", 232, 185);
			naviregisterwarp("Warper > Hugel Field 7", "hu_fild07", 227, 197);
		}
	}

	if (checkre(0)) {
		naviregisterwarp("Warper > Lasagna Field 1", "lasa_fild01", 344, 371);
		if (!.OnlyFirstFld) {
			naviregisterwarp("Warper > Lasagna Field 2", "lasa_fild02", 20, 98);
		}
	}

	naviregisterwarp("Warper > Lighthalzen Field 1", "lhz_fild01", 240, 179);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Lighthalzen Field 2", "lhz_fild02", 185, 235);
		naviregisterwarp("Warper > Lighthalzen Field 3", "lhz_fild03", 240, 226);
	}

	naviregisterwarp("Warper > Luoyang Field 1", "lou_fild01", 229, 187);

	naviregisterwarp("Warper > Lutie Field 1", "xmas_fild01", 115, 145);

	if (checkre(0)) {
		naviregisterwarp("Warper > Malaya Field 1", "ma_fild01", 40, 272);
		if (!.OnlyFirstFld) {
			naviregisterwarp("Warper > Malaya Field 2", "ma_fild02", 207, 180);
		}
	}

	naviregisterwarp("Warper > Manuk Field 1", "man_fild01", 35, 236);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Manuk Field 2", "man_fild02", 35, 262);
		naviregisterwarp("Warper > Manuk Field 3", "man_fild03", 84, 365);
	}

	naviregisterwarp("Warper > Mjolnir Field 1", "mjolnir_01", 204, 120);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Mjolnir Field 2", "mjolnir_02", 175, 193);
		naviregisterwarp("Warper > Mjolnir Field 3", "mjolnir_03", 208, 213);
		naviregisterwarp("Warper > Mjolnir Field 4", "mjolnir_04", 179, 180);
		naviregisterwarp("Warper > Mjolnir Field 5", "mjolnir_05", 181, 240);
		naviregisterwarp("Warper > Mjolnir Field 6", "mjolnir_06", 195, 270);
		naviregisterwarp("Warper > Mjolnir Field 7", "mjolnir_07", 235, 202);
		naviregisterwarp("Warper > Mjolnir Field 8", "mjolnir_08", 188, 215);
		naviregisterwarp("Warper > Mjolnir Field 9", "mjolnir_09", 205, 144);
		naviregisterwarp("Warper > Mjolnir Field 10", "mjolnir_10", 245, 223);
		naviregisterwarp("Warper > Mjolnir Field 11", "mjolnir_11", 180, 206);
		naviregisterwarp("Warper > Mjolnir Field 12", "mjolnir_12", 196, 208);
	}

	naviregisterwarp("Warper > Moscovia Field 1", "mosk_fild01", 82, 104);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Moscovia Field 2", "mosk_fild02", 131, 147);
	}

	naviregisterwarp("Warper > Niflheim Field 1", "nif_fild01", 215, 229);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warer > Niflheim Field 2", "nif_fild02", 167, 234);
	}

	naviregisterwarp("Warper > Payon Forest 1", "pay_fild01", 158, 206);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Payon Forest 2", "pay_fild02", 151, 219);
		naviregisterwarp("Warper > Payon Forest 3", "pay_fild03", 205, 148);
		naviregisterwarp("Warper > Payon Forest 4", "pay_fild04", 186, 247);
		naviregisterwarp("Warper > Payon Forest 6", "pay_fild06", 193, 235);
		naviregisterwarp("Warper > Payon Forest 7", "pay_fild07", 200, 177);
		naviregisterwarp("Warper > Payon Forest 8", "pay_fild08", 137, 189);
		naviregisterwarp("Warper > Payon Forest 9", "pay_fild09", 201, 224);
		naviregisterwarp("Warper > Payon Forest 10", "pay_fild10", 160, 205);
		if (!checkre(0)) {
			naviregisterwarp("Warper > Payon Forest 5", "pay_fild05", 134, 204);
			naviregisterwarp("Warper > Payon Forest 11", "pay_fild11", 194, 150);
		}
	}

	naviregisterwarp("Warper > Prontera Field 0", "prt_fild00", 208, 227);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Prontera Field 1", "prt_fild01", 190, 206);
		naviregisterwarp("Warper > Prontera Field 2", "prt_fild02", 240, 206);
		naviregisterwarp("Warper > Prontera Field 3", "prt_fild03", 190, 143);
		naviregisterwarp("Warper > Prontera Field 4", "prt_fild04", 307, 252);
		naviregisterwarp("Warper > Prontera Field 5", "prt_fild05", 239, 213);
		naviregisterwarp("Warper > Prontera Field 6", "prt_fild06", 185, 188);
		naviregisterwarp("Warper > Prontera Field 7", "prt_fild07", 193, 194);
		naviregisterwarp("Warper > Prontera Field 8", "prt_fild08", 187, 218);
		naviregisterwarp("Warper > Prontera Field 9", "prt_fild09", 210, 183);
		naviregisterwarp("Warper > Prontera Field 10", "prt_fild10", 195, 149);
		naviregisterwarp("Warper > Prontera Field 11", "prt_fild11", 198, 164);
	}

	naviregisterwarp("Warper > Rachel Field 1", "ra_fild01", 192, 162);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Rachel Field 3", "ra_fild03", 202, 206);
		naviregisterwarp("Warper > Rachel Field 4", "ra_fild04", 202, 208);
		naviregisterwarp("Warper > Rachel Field 5", "ra_fild05", 225, 202);
		naviregisterwarp("Warper > Rachel Field 6", "ra_fild06", 202, 214);
		naviregisterwarp("Warper > Rachel Field 8", "ra_fild08", 217, 201);
		naviregisterwarp("Warper > Rachel Field 12", "ra_fild12", 175, 200);

		if (!checkre(0)) {
			naviregisterwarp("Warper > Rachel Field 2", "ra_fild02", 235, 166);
			naviregisterwarp("Warper > Rachel Field 7", "ra_fild07", 263, 196);
			naviregisterwarp("Warper > Rachel Field 9", "ra_fild09", 87, 121);
			naviregisterwarp("Warper > Rachel Field 10", "ra_fild10", 277, 181);
			naviregisterwarp("Warper > Rachel Field 11", "ra_fild11", 221, 185);
			naviregisterwarp("Warper > Rachel Field 13", "ra_fild13", 174, 197);
		}
	}

	if (.Satan_Morocc) {
		naviregisterwarp("Warper > Sograt Desert 1", "moc_fild01", 219, 205);
		if (!.OnlyFirstFld) {
			naviregisterwarp("Warper > Sograt Desert 2", "moc_fild02", 177, 206);
			naviregisterwarp("Warper > Sograt Desert 3", "moc_fild03", 194, 182);
			naviregisterwarp("Warper > Sograt Desert 7", "moc_fild07", 224, 170);
			naviregisterwarp("Warper > Sograt Desert 11", "moc_fild11", 198, 216);
			naviregisterwarp("Warper > Sograt Desert 12", "moc_fild12", 156, 187);
			naviregisterwarp("Warper > Sograt Desert 13", "moc_fild13", 185, 263);
			naviregisterwarp("Warper > Sograt Desert 16", "moc_fild16", 206, 228);
			naviregisterwarp("Warper > Sograt Desert 17", "moc_fild17", 208, 238);
			naviregisterwarp("Warper > Sograt Desert 18", "moc_fild18", 209, 223);
			naviregisterwarp("Warper > Sograt Desert 19", "moc_fild19", 85, 97);
			naviregisterwarp("Warper > Sograt Desert 20", "moc_fild20", 207, 202);
			naviregisterwarp("Warper > Sograt Desert 21", "moc_fild21", 31, 195);
			naviregisterwarp("Warper > Sograt Desert 22", "moc_fild22", 38, 195);
		}
	} else {
		naviregisterwarp("Warper > Sograt Desert 1", "moc_fild01", 219, 205);
		if (!.OnlyFirstFld) {
			naviregisterwarp("Warper > Sograt Desert 2", "moc_fild02", 177, 206);
			naviregisterwarp("Warper > Sograt Desert 3", "moc_fild03", 194, 182);
			naviregisterwarp("Warper > Sograt Desert 4", "moc_fild04", 146, 297);
			naviregisterwarp("Warper > Sograt Desert 5", "moc_fild05", 204, 197);
			naviregisterwarp("Warper > Sograt Desert 6", "moc_fild06", 275, 302);
			naviregisterwarp("Warper > Sograt Desert 7", "moc_fild07", 224, 170);
			naviregisterwarp("Warper > Sograt Desert 8", "moc_fild08", 139, 123);
			naviregisterwarp("Warper > Sograt Desert 9", "moc_fild09", 101, 110);
			naviregisterwarp("Warper > Sograt Desert 10", "moc_fild10", 341, 39);
			naviregisterwarp("Warper > Sograt Desert 11", "moc_fild11", 198, 216);
			naviregisterwarp("Warper > Sograt Desert 12", "moc_fild12", 156, 187);
			naviregisterwarp("Warper > Sograt Desert 13", "moc_fild13", 185, 263);
			naviregisterwarp("Warper > Sograt Desert 14", "moc_fild14", 223, 222);
			naviregisterwarp("Warper > Sograt Desert 15", "moc_fild15", 170, 257);
			naviregisterwarp("Warper > Sograt Desert 16", "moc_fild16", 206, 228);
			naviregisterwarp("Warper > Sograt Desert 17", "moc_fild17", 208, 238);
			naviregisterwarp("Warper > Sograt Desert 18", "moc_fild18", 209, 223);
			naviregisterwarp("Warper > Sograt Desert 19", "moc_fild19", 85, 97);
		}
	}

	naviregisterwarp("Warper > Splendide Field 1", "spl_fild01", 175, 186);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Splendide Field 2", "spl_fild02", 236, 184);
		naviregisterwarp("Warper > Splendide Field 3", "spl_fild03", 188, 204);
	}

	naviregisterwarp("Warper > Umbala Field 1", "um_fild01", 217, 206);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Umbala Field 2", "um_fild02", 223, 221);
		naviregisterwarp("Warper > Umbala Field 3", "um_fild03", 237, 215);
		naviregisterwarp("Warper > Umbala Field 4", "um_fild04", 202, 197);
	}

	naviregisterwarp("Warper > Veins Field 1", "ve_fild01", 186, 175);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Veins Field 2", "ve_fild02", 196, 370);
		naviregisterwarp("Warper > Veins Field 3", "ve_fild03", 222, 45);
		naviregisterwarp("Warper > Veins Field 4", "ve_fild04", 51, 250);
		naviregisterwarp("Warper > Veins Field 6", "ve_fild06", 150, 223);
		naviregisterwarp("Warper > Veins Field 7", "ve_fild07", 149, 307);
		if (!checkre(0)) {
			naviregisterwarp("Warper > Veins Field 5", "ve_fild05", 202, 324);
		}
	}

	naviregisterwarp("Warper > Juno Field 1", "yuno_fild01", 189, 224);
	if (!.OnlyFirstFld) {
		naviregisterwarp("Warper > Juno Field 2", "yuno_fild02", 192, 207);
		naviregisterwarp("Warper > Juno Field 3", "yuno_fild03", 221, 157);
		naviregisterwarp("Warper > Juno Field 4", "yuno_fild04", 226, 199);
		naviregisterwarp("Warper > Juno Field 6", "yuno_fild06", 187, 232);
		naviregisterwarp("Warper > Juno Field 7", "yuno_fild07", 231, 174);
		naviregisterwarp("Warper > Juno Field 8", "yuno_fild08", 196, 203);
		naviregisterwarp("Warper > Juno Field 9", "yuno_fild09", 183, 214);
		naviregisterwarp("Warper > Juno Field 11", "yuno_fild11", 195, 226);
		naviregisterwarp("Warper > Juno Field 12", "yuno_fild12", 210, 304);
		if (!checkre(0)) {
			naviregisterwarp("Warper > Juno Field 5", "yuno_fild05", 223, 177);
			naviregisterwarp("Warper > Juno Field 10", "yuno_fild10", 200, 124);
		}
	}

	naviregisterwarp("Warper > Abyss Lakes 1", "abyss_01", 261, 272);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Abyss Lakes 2", "abyss_02", 275, 270);
		naviregisterwarp("Warper > Abyss Lakes 3", "abyss_03", 116, 27);
	}
	naviregisterwarp("Warper > Amatsu Dungeon 1", "ama_dun01", 228, 11);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Amatsu Dungeon 2", "ama_dun02", 34, 41);
		naviregisterwarp("Warper > Amatsu Dungeon 3", "ama_dun03", 119, 14);
	}
	
	naviregisterwarp("Warper > Anthell 1", "anthell01", 35, 262);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Anthell 2", "anthell02", 168, 170);
	}

	naviregisterwarp("Warper > Ancient Shrine Maze", "ayo_dun01", 275, 19);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Inside Ancient Shrine", "ayo_dun02", 24, 26);
	}

	naviregisterwarp("Warper > Beach Dungeon 1", "beach_dun", 266, 67);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Beach Dungeon 2", "beach_dun2", 255, 244);
		naviregisterwarp("Warper > Beach Dungeon 3", "beach_dun3", 23, 260);
	}

	naviregisterwarp("Warper > Bio Lab 1", "lhz_dun01", 150, 288);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Bio Lab 2", "lhz_dun02", 150, 18);
		naviregisterwarp("Warper > Bio Lab 3", "lhz_dun03", 140, 134);
		if (checkre(0)) {
			naviregisterwarp("Warper > Bio Lab 4", "lhz_dun04", 244, 52);
		}
	}

	naviregisterwarp("Warper > Brasilis Dungeon 1", "bra_dun01", 87, 47);
	if (!.OnlyFirstDun) {
		if (checkre(0)) {
			naviregisterwarp("Warper > Brasilis Dungeon 2", "bra_dun02", 262, 262);
		}
	}

	naviregisterwarp("Warper > Byalan Dungeon 1", "iz_dun00", 168, 168);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Byalan Dungeon 2", "iz_dun01", 253, 252);
		naviregisterwarp("Warper > Byalan Dungeon 3", "iz_dun02", 236, 204);
		naviregisterwarp("Warper > Byalan Dungeon 4", "iz_dun03", 32, 63);
		naviregisterwarp("Warper > Byalan Dungeon 5", "iz_dun04", 26, 27);
		if (checkre(0)) {
			naviregisterwarp("Warper > Byalan Dungeon 6", "iz_dun05", 141, 187);
		}
	}
	naviregisterwarp("Warper > Clock Tower 1", "c_tower1", 199, 159);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Clock Tower 2", "c_tower2", 148, 283);
		naviregisterwarp("Warper > Clock Tower 3", "c_tower3", 65, 147);
		naviregisterwarp("Warper > Clock Tower 4", "c_tower4", 56, 155);
		naviregisterwarp("Warper > Basement 1", "alde_dun01", 297, 25);
		naviregisterwarp("Warper > Basement 2", "alde_dun02", 127, 169);
		naviregisterwarp("Warper > Basement 3", "alde_dun03", 277, 178);
		naviregisterwarp("Warper > Basement 4", "alde_dun04", 268, 74);
	}
	naviregisterwarp("Warper > Coal Mines 1", "mjo_dun01", 52, 17);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Coal Mines 2", "mjo_dun02", 381, 343);
		naviregisterwarp("Warper > Coal Mines 3", "mjo_dun03", 302, 262);
	}
	naviregisterwarp("Warper > Culvert 1", "prt_sewb1", 131, 247);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Culvert 2", "prt_sewb2", 19, 19);
		naviregisterwarp("Warper > Culvert 3", "prt_sewb3", 180, 169);
		naviregisterwarp("Warper > Culvert 4", "prt_sewb4", 100, 92);
	}
	naviregisterwarp("Warper > Cursed Abbey 1", "abbey01", 51, 14);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Cursed Abbey 2", "abbey02", 150, 11);
		naviregisterwarp("Warper > Cursed Abbey 3", "abbey03", 120, 10);
	}
	if (checkre(0)) {
		naviregisterwarp("Warper > Dewata Dungeon 1", "dew_dun01", 285, 160);
		if (!.OnlyFirstDun) {
			naviregisterwarp("Warper > Dewata Dungeon 2", "dew_dun02", 299, 29);
		}
	}
	naviregisterwarp("Warper > Einbroch Dungeon 1", "ein_dun01", 22, 14);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Einbroch Dungeon 2", "ein_dun02", 292, 290);
	}
	naviregisterwarp("Warper > Gefenia 1", "gefenia01", 40, 103);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Gefenia 2", "gefenia02", 203, 34);
		naviregisterwarp("Warper > Gefenia 3", "gefenia03", 266, 168);
		naviregisterwarp("Warper > Gefenia 4", "gefenia04", 130, 272);
	}
	naviregisterwarp("Warper > Geffen Dungeon 1", "gef_dun00", 104, 99);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Geffen Dungeon 2", "gef_dun01", 115, 236);
		naviregisterwarp("Warper > Geffen Dungeon 3", "gef_dun02", 106, 132);
		naviregisterwarp("Warper > Geffen Dungeon 4", "gef_dun03", 203, 200);
	}
	naviregisterwarp("Warper > Entrance", "glast_01", 370, 304);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Castle 1", "gl_cas01", 199, 29);
		naviregisterwarp("Warper > Castle 2", "gl_cas02", 104, 25);
		naviregisterwarp("Warper > Chivalry 1", "gl_knt01", 150, 15);
		naviregisterwarp("Warper > Chivalry 2", "gl_knt02", 157, 287);
		naviregisterwarp("Warper > Churchyard", "gl_chyard", 147, 15);
		naviregisterwarp("Warper > Culvert 1", "gl_sew01", 258, 255);
		naviregisterwarp("Warper > Culvert 2", "gl_sew02", 108, 291);
		naviregisterwarp("Warper > Culvert 3", "gl_sew03", 171, 283);
		naviregisterwarp("Warper > Culvert 4", "gl_sew04", 68, 277);
		naviregisterwarp("Warper > St. Abbey", "gl_church", 156, 7);
		naviregisterwarp("Warper > Staircase Dungeon", "gl_step", 12, 7);
		naviregisterwarp("Warper > Underground Cave 1", "gl_dun01", 133, 271);
		naviregisterwarp("Warper > Underground Cave 2", "gl_dun02", 224, 274);
		naviregisterwarp("Warper > Underground Prison 1", "gl_prison", 14, 70);
		naviregisterwarp("Warper > Underground Prison 2", "gl_prison1", 150, 14);
	}
	naviregisterwarp("Warper > Kunlun Dungeon 1", "gon_dun01", 153, 53);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Kunlun Dungeon 2", "gon_dun02", 28, 113);
		naviregisterwarp("Warper > Kunlun Dungeon 3", "gon_dun03", 68, 16);
	}
	naviregisterwarp("Warper > Hidden Dungeon 1", "prt_maze01", 176, 7);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Hidden Dungeon 2", "prt_maze02", 93, 20);
		naviregisterwarp("Warper > Hidden Dungeon 3", "prt_maze03", 23, 8);
	}
	naviregisterwarp("Warper > Ice Dungeon 1", "ice_dun01", 157, 14);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Ice Dungeon 2", "ice_dun02", 151, 155);
		naviregisterwarp("Warper > Ice Dungeon 3", "ice_dun03", 149, 22);
		naviregisterwarp("Warper > Ice Dungeon 4", "ice_dun04", 33, 158);
	}
	naviregisterwarp("Warper > Entrance", "jupe_cave", 140, 51);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Juperos 1", "juperos_01", 53, 247);
		naviregisterwarp("Warper > Juperos 2", "juperos_02", 37, 63);
		naviregisterwarp("Warper > Core", "jupe_core", 150, 285);
	}
	naviregisterwarp("Warper > Kiel Dungeon 1", "kh_dun01", 28, 226);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Kiel Dungeon 2", "kh_dun02", 41, 198);
	}
	if (checkre(0)) {
		naviregisterwarp("Warper > Lasagna Dungeon 1", "lasa_dun01", 24, 143);
		if (!.OnlyFirstDun) {
			naviregisterwarp("Warper > Lasagna Dungeon 2", "lasa_dun02", 22, 171);
			naviregisterwarp("Warper > Lasagna Dungeon 3", "lasa_dun03", 190, 18);
		}
	}
	naviregisterwarp("Warper > The Royal Tomb", "lou_dun01", 218, 196);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Inside the Royal Tomb", "lou_dun02", 282, 20);
		naviregisterwarp("Warper > Suei Long Gon", "lou_dun03", 165, 38);
	}
	naviregisterwarp("Warper > Magma Dungeon 1", "mag_dun01", 126, 68);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Magma Dungeon 2", "mag_dun02", 47, 30);
	}
	if (checkre(0)) {
		naviregisterwarp("Warper > Malangdo Dungeon 1", "mal_dun01", 33, 230);
	}
	naviregisterwarp("Warper > Moscovia Dungeon 1", "mosk_dun01", 189, 48);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Moscovia Dungeon 2", "mosk_dun02", 165, 30);
		naviregisterwarp("Warper > Moscovia Dungeon 3", "mosk_dun03", 32, 135);
	}
	naviregisterwarp("Warper > Nidhogg's Dungeon 1", "nyd_dun01", 61, 239);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Nidhogg's Dungeon 2", "nyd_dun02", 60, 271);
	}
	naviregisterwarp("Warper > Odin Temple 1", "odin_tem01", 298, 167);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Odin Temple 2", "odin_tem02", 224, 149);
		naviregisterwarp("Warper > Odin Temple 3", "odin_tem03", 266, 280);
	}
	naviregisterwarp("Warper > Orc Dungeon 1", "orcsdun01", 32, 170);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Orc Dungeon 2", "orcsdun02", 21, 185);
	}
	naviregisterwarp("Warper > Payon Dungeon 1", "pay_dun00", 21, 183);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Payon Dungeon 2", "pay_dun01", 19, 33);
		naviregisterwarp("Warper > Payon Dungeon 3", "pay_dun02", 19, 63);
		naviregisterwarp("Warper > Payon Dungeon 4", "pay_dun03", 155, 159);
		naviregisterwarp("Warper > Payon Dungeon 5", "pay_dun04", 201, 204);
	}
	naviregisterwarp("Warper > Pyramids 1", "moc_pryd01", 192, 9);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Pyramids 2", "moc_pryd02", 10, 192);
		naviregisterwarp("Warper > Pyramids 3", "moc_pryd03", 100, 92);
		naviregisterwarp("Warper > Pyramids 4", "moc_pryd04", 181, 11);
		naviregisterwarp("Warper > Basement 1", "moc_pryd05", 94, 96);
		naviregisterwarp("Warper > Basement 2", "moc_pryd06", 192, 8);
		if (checkre(0)) {
			naviregisterwarp("Warper > Basement 1 - Nightmare Mode", "moc_prydn1", 94, 96);
			naviregisterwarp("Warper > Basement 2 - Nightmare Mode", "moc_prydn2", 192, 8);
		}
	}
	naviregisterwarp("Warper > Rachel Sanctuary 1", "ra_san01", 140, 11);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Rachel Sanctuary 2", "ra_san02", 32, 21);
		naviregisterwarp("Warper > Rachel Sanctuary 3", "ra_san03", 8, 149);
		naviregisterwarp("Warper > Rachel Sanctuary 4", "ra_san04", 204, 218);
		naviregisterwarp("Warper > Rachel Sanctuary 5", "ra_san05", 150, 9);
	}
	if (checkre(0)) {
		naviregisterwarp("Warper > Scaraba Hole 1", "dic_dun01", 364, 44);
		if (!.OnlyFirstDun) {
			naviregisterwarp("Warper > Scaraba Hole 2", "dic_dun02", 101, 141);
		}
	}
	naviregisterwarp("Warper > Sphinx 1", "in_sphinx1", 288, 9);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Sphinx 2", "in_sphinx2", 149, 81);
		naviregisterwarp("Warper > Sphinx 3", "in_sphinx3", 210, 54);
		naviregisterwarp("Warper > Sphinx 4", "in_sphinx4", 10, 222);
		naviregisterwarp("Warper > Sphinx 5", "in_sphinx5", 100, 99);
	}
	naviregisterwarp("Warper > Sunken Ship 1", "treasure01", 69, 24);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Sunken Ship 2", "treasure02", 102, 27);
	}
	naviregisterwarp("Warper > Thanatos Tower 1", "tha_t01", 150, 39);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Thanatos Tower 2", "tha_t02", 150, 136);
		naviregisterwarp("Warper > Thanatos Tower 3", "tha_t03", 220, 158);
		naviregisterwarp("Warper > Thanatos Tower 4", "tha_t04", 59, 143);
		naviregisterwarp("Warper > Thanatos Tower 5", "tha_t05", 62, 11);
		naviregisterwarp("Warper > Thanatos Tower 6", "tha_t06", 89, 221);
		naviregisterwarp("Warper > Thanatos Tower 7", "tha_t07", 35, 166);
		naviregisterwarp("Warper > Thanatos Tower 8", "tha_t08", 93, 148);
		naviregisterwarp("Warper > Thanatos Tower 9", "tha_t09", 29, 107);
		naviregisterwarp("Warper > Thanatos Tower 10", "tha_t10", 159, 138);
		naviregisterwarp("Warper > Thanatos Tower 11", "tha_t11", 19, 20);
		naviregisterwarp("Warper > Thanatos Tower 12", "tha_t12", 130, 52);
	}
	naviregisterwarp("Warper > Thor Volcano 1", "thor_v01", 21, 228);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Thor Volcano 2", "thor_v02", 75, 205);
		naviregisterwarp("Warper > Thor Volcano 3", "thor_v03", 34, 272);
	}
	naviregisterwarp("Warper > Toy Factory 1", "xmas_dun01", 205, 15);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Toy Factory 2", "xmas_dun02", 129, 133);
	}
	naviregisterwarp("Warper > Entrance", "tur_dun01", 154, 49);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Turtle Dungeon 1", "tur_dun02", 148, 261);
		naviregisterwarp("Warper > Turtle Dungeon 2", "tur_dun03", 132, 189);
		naviregisterwarp("Warper > Turtle Dungeon 3", "tur_dun04", 100, 192);
	}
	naviregisterwarp("Warper > Carpenter's Shop in the Tree", "um_dun01", 42, 31);
	if (!.OnlyFirstDun) {
		naviregisterwarp("Warper > Passage to a Foreign World", "um_dun02", 48, 30);
		naviregisterwarp("Warper > Hvergermil's Fountain", "yggdrasil01", 204, 78);
	}
	if (checkre(0)) {
		naviregisterwarp("Warper > Bifrost Tower 1", "ecl_tdun01", 57, 13);
		if (!.OnlyFirstDun) {
			naviregisterwarp("Warper > Bifrost Tower 2", "ecl_tdun02", 64, 88);
			naviregisterwarp("Warper > Bifrost Tower 3", "ecl_tdun03", 45, 14);
			naviregisterwarp("Warper > Bifrost Tower 4", "ecl_tdun04", 26, 23);
		}
	}

	// castles

	naviregisterwarp("Warper > Neuschwanstein", "alde_gld", 48, 83);
	naviregisterwarp("Warper > Hohenschwangau", "alde_gld", 95, 249);
	naviregisterwarp("Warper > Nuenberg", "alde_gld", 142, 85);
	naviregisterwarp("Warper > Wuerzburg", "alde_gld", 239, 242);
	naviregisterwarp("Warper > Rothenburg", "alde_gld", 264, 90);
	naviregisterwarp("Warper > Repherion", "gef_fild13", 214, 75);
	naviregisterwarp("Warper > Eeyolbriggar", "gef_fild13", 308, 240);
	naviregisterwarp("Warper > Yesnelph", "gef_fild13", 143, 240);
	naviregisterwarp("Warper > Bergel", "gef_fild13", 193, 278);
	naviregisterwarp("Warper > Mersetzdeitz", "gef_fild13", 305, 87);
	naviregisterwarp("Warper > Bright Arbor", "pay_gld", 121, 233);
	naviregisterwarp("Warper > Scarlet Palace", "pay_gld", 295, 116);
	naviregisterwarp("Warper > Holy Shadow", "pay_gld", 317, 293);
	naviregisterwarp("Warper > Sacred Altar", "pay_gld", 140, 160);
	naviregisterwarp("Warper > Bamboo Grove Hill", "pay_gld", 204, 266);
	naviregisterwarp("Warper > Kriemhild", "prt_gld", 134, 65);
	naviregisterwarp("Warper > Swanhild", "prt_gld", 240, 128);
	naviregisterwarp("Warper > Fadhgridh", "prt_gld", 153, 137);
	naviregisterwarp("Warper > Skoegul", "prt_gld", 111, 240);
	naviregisterwarp("Warper > Gondul", "prt_gld", 208, 240);
	naviregisterwarp("Warper > Mardol", "aru_gld", 158, 272);
	naviregisterwarp("Warper > Cyr", "aru_gld", 83, 47);
	naviregisterwarp("Warper > Horn", "aru_gld", 68, 155);
	naviregisterwarp("Warper > Gefn", "aru_gld", 299, 345);
	naviregisterwarp("Warper > Banadis", "aru_gld", 292, 107);
	naviregisterwarp("Warper > Himinn", "sch_gld", 293, 100);
	naviregisterwarp("Warper > Andlangr", "sch_gld", 288, 252);
	naviregisterwarp("Warper > Viblainn", "sch_gld", 97, 196);
	naviregisterwarp("Warper > Hljod", "sch_gld", 137, 90);
	naviregisterwarp("Warper > Skidbladnir", "sch_gld", 71, 315);

	if (checkre(0)) {
		naviregisterwarp("Warper > Kafragarten 1", "te_alde_gld", 48, 83);
		naviregisterwarp("Warper > Kafragarten 2", "te_alde_gld", 95, 249);
		naviregisterwarp("Warper > Kafragarten 3", "te_alde_gld", 142, 85);
		naviregisterwarp("Warper > Kafragarten 4", "te_alde_gld", 239, 242);
		naviregisterwarp("Warper > Kafragarten 5", "te_alde_gld", 264, 90);
		naviregisterwarp("Warper > Gloria 1", "te_prt_gld", 134, 65);
		naviregisterwarp("Warper > Gloria 2", "te_prt_gld", 240, 128);
		naviregisterwarp("Warper > Gloria 3", "te_prt_gld", 153, 137);
		naviregisterwarp("Warper > Gloria 4", "te_prt_gld", 111, 240);
		naviregisterwarp("Warper > Gloria 5", "te_prt_gld", 208, 240);
	}

	// guild dungeons
	naviregisterwarp("Warper > Baldur F1", "gld_dun01", 119, 93);
	naviregisterwarp("Warper > Luina F1", "gld_dun02", 39, 161);
	naviregisterwarp("Warper > Valkyrie F1", "gld_dun03", 50, 44);
	naviregisterwarp("Warper > Britoniah F1", "gld_dun04", 116, 45);
	naviregisterwarp("Warper > Arunafeltz", "arug_dun01", 199, 195);
	naviregisterwarp("Warper > Schwarzwald", "schg_dun01", 200,124);
	if (checkre(0)) {
		naviregisterwarp("Warper > Baldur F2", "gld_dun01_2", 119, 93);
		naviregisterwarp("Warper > Hall of Abyss", "gld2_pay", 120, 130);
		naviregisterwarp("Warper > Luina F2", "gld_dun02_2", 39, 161);
		naviregisterwarp("Warper > Hall of Abyss", "gld2_ald", 147, 155);
		naviregisterwarp("Warper > Valkyrie F2", "gld_dun03_2", 50, 44);
		naviregisterwarp("Warper > Hall of Abyss", "gld2_prt", 140, 132);
		naviregisterwarp("Warper > Britoniah F2", "gld_dun04_2", 116, 45);
		naviregisterwarp("Warper > Hall of Abyss", "gld2_gef", 152, 118);
		naviregisterwarp("Warper > Kafragarten", "teg_dun01", 42, 36);
		naviregisterwarp("Warper > Gloria", "teg_dun02", 26, 160);
	}
	end;

	// instances
	naviregisterwarp("Warper > Endless Tower", "e_tower", 72, 112);
	naviregisterwarp("Warper > Nidhoggur's Nest", "nyd_dun02", 95, 193);
	naviregisterwarp("Warper > Orc's Memory", "gef_fild10", 240, 198);
	naviregisterwarp("Warper > Sealed Shrine", "monk_test", 306, 143);
	if (checkre(0)) {
		naviregisterwarp("Warper > Bakonawa Lake", "ma_scene01", 172, 175);
		naviregisterwarp("Warper > Bangungot Hospital 2F", "ma_dun01", 151, 8);
		naviregisterwarp("Warper > Buwaya Cave", "ma_fild02", 316, 317);
		naviregisterwarp("Warper > Devil Tower", "dali02", 137, 115);
		naviregisterwarp("Warper > Eclage Interior", "ecl_hub01", 129, 12);
		naviregisterwarp("Warper > Faceworms Nest", "dali", 85, 64);
		naviregisterwarp("Warper > Geffen Magic Tournament", "dali", 94, 141);
		naviregisterwarp("Warper > Ghost Palace", "dali02", 46, 128);
		naviregisterwarp("Warper > Hazy Forest", "bif_fild01", 161, 334);
		naviregisterwarp("Warper > Horror Toy Factory", "xmas", 234, 298);
		naviregisterwarp("Warper > Malangdo Culvert", "mal_in01", 164, 21);
		naviregisterwarp("Warper > Octopus Cave", "mal_dun01", 152, 230);
		naviregisterwarp("Warper > Old Glast Heim", "glast_01", 204, 268);
		naviregisterwarp("Warper > Sarah and Fenrir", "dali02", 92, 141);
		naviregisterwarp("Warper > Sara Memory", "dali", 133, 108);
		naviregisterwarp("Warper > Wolfchev's Laboratory", "lhz_dun04", 148, 269);
	}


	// special
	naviregisterwarp("Warper > Auction Hall", "auction_01", 22, 68);
	naviregisterwarp("Warper > Battlegrounds", "bat_room", 154, 150);
	naviregisterwarp("Warper > Casino", "cmd_in02", 179, 129);
	naviregisterwarp("Warper > Kunlun Arena", "gon_test", 48, 10);
	naviregisterwarp("Warper > Izlude Arena", "arena_room", 100, 88);
	naviregisterwarp("Warper > Monster Race Arena", "p_track01", 62, 41);
	naviregisterwarp("Warper > Turbo Track", "turbo_room", 99, 114);
	if (checkre(0)) {
		naviregisterwarp("Warper > Dimensional Rift", "dali", 113, 82);
		naviregisterwarp("Warper > Eden Group Headquarters", "moc_para01", 31, 14);
		naviregisterwarp("Warper > Para Market", "paramk", 97, 17);
	}

OnInit:
	.Satan_Morocc = true;	//	false will enable moc_fild 4,5,6,8,9,10,14,15 while disable moc_fild 20,21,22 Default is true.
	.OnlyFirstFld = false;	//	true will teleport to the first level of the Fields  Default is false.
	.OnlyFirstDun = false;	//	true will teleport to the first level of the Dungeons  Default is false.
}




moc_para01,35,20,2	duplicate(Medica)	Medica#mora	569
moc_para01,32,32,4	duplicate(Warper)	Warper#para	811

 